// NOTE this file is auto-generated by chew
module gfx

import shy.wraps.sokol.c as _

pub const version = 1

//
// sokol_gfx.h
//

/*
TODO Non-numerical: #define SOKOL_GFX_IMPL
*/

/*
TODO Function: #define SOKOL_GFX_INCLUDED (1)
*/

/*
TODO Non-numerical: #define SOKOL_GFX_API_DECL SOKOL_API_DECL
*/

/*
TODO Function: #define SOKOL_GFX_API_DECL __declspec(dllexport)
*/

/*
TODO Function: #define SOKOL_GFX_API_DECL __declspec(dllimport)
*/

/*
TODO Non-numerical: #define SOKOL_GFX_API_DECL extern
*/

@[typedef]
pub struct C.sg_buffer {
	id u32 // NOTE Added from chew config
}

pub type Buffer = C.sg_buffer

@[typedef]
pub struct C.sg_image {
	id u32 // NOTE Added from chew config
}

pub type Image = C.sg_image

@[typedef]
pub struct C.sg_sampler {
	id u32 // NOTE Added from chew config
}

pub type Sampler = C.sg_sampler

@[typedef]
pub struct C.sg_shader {
	id u32 // NOTE Added from chew config
}

pub type Shader = C.sg_shader

@[typedef]
pub struct C.sg_pipeline {
	id u32 // NOTE Added from chew config
}

pub type Pipeline = C.sg_pipeline

@[typedef]
pub struct C.sg_attachments {
	id u32 // NOTE Added from chew config
}

pub type Attachments = C.sg_attachments

@[typedef]
pub struct C.sg_range {
pub mut:
	ptr  voidptr
	size usize
}

pub type Range = C.sg_range

/*
TODO Function: #define SG_RANGE(x) sg_range{ &x, sizeof(x) }
*/

/*
TODO Function: #define SG_RANGE_REF(x) sg_range{ &x, sizeof(x) }
*/

/*
TODO Function: #define SG_RANGE(x) (sg_range){ &x, sizeof(x) }
*/

/*
TODO Function: #define SG_RANGE_REF(x) &(sg_range){ &x, sizeof(x) }
*/

@[typedef]
pub struct C.sg_color {
	r f32 // NOTE Added from chew config
	g f32 // NOTE Added from chew config
	b f32 // NOTE Added from chew config
	a f32 // NOTE Added from chew config
}

pub type Color = C.sg_color

// Backend is C.sg_backend
pub enum Backend {
	glcore33        = C.SG_BACKEND_GLCORE
	gles3           = C.SG_BACKEND_GLES3
	d3d11           = C.SG_BACKEND_D3D11
	metal_ios       = C.SG_BACKEND_METAL_IOS
	metal_macos     = C.SG_BACKEND_METAL_MACOS
	metal_simulator = C.SG_BACKEND_METAL_SIMULATOR
	wgpu            = C.SG_BACKEND_WGPU
	dummy           = C.SG_BACKEND_DUMMY
}

// PixelFormat is C.sg_pixel_format
pub enum PixelFormat {
	default         = C._SG_PIXELFORMAT_DEFAULT // value 0 reserved for default-init
	@none           = C.SG_PIXELFORMAT_NONE
	r8              = C.SG_PIXELFORMAT_R8
	r8sn            = C.SG_PIXELFORMAT_R8SN
	r8ui            = C.SG_PIXELFORMAT_R8UI
	r8si            = C.SG_PIXELFORMAT_R8SI
	r16             = C.SG_PIXELFORMAT_R16
	r16sn           = C.SG_PIXELFORMAT_R16SN
	r16ui           = C.SG_PIXELFORMAT_R16UI
	r16si           = C.SG_PIXELFORMAT_R16SI
	r16f            = C.SG_PIXELFORMAT_R16F
	rg8             = C.SG_PIXELFORMAT_RG8
	rg8sn           = C.SG_PIXELFORMAT_RG8SN
	rg8ui           = C.SG_PIXELFORMAT_RG8UI
	rg8si           = C.SG_PIXELFORMAT_RG8SI
	r32ui           = C.SG_PIXELFORMAT_R32UI
	r32si           = C.SG_PIXELFORMAT_R32SI
	r32f            = C.SG_PIXELFORMAT_R32F
	rg16            = C.SG_PIXELFORMAT_RG16
	rg16sn          = C.SG_PIXELFORMAT_RG16SN
	rg16ui          = C.SG_PIXELFORMAT_RG16UI
	rg16si          = C.SG_PIXELFORMAT_RG16SI
	rg16f           = C.SG_PIXELFORMAT_RG16F
	rgba8           = C.SG_PIXELFORMAT_RGBA8
	srgb8a8         = C.SG_PIXELFORMAT_SRGB8A8
	rgba8sn         = C.SG_PIXELFORMAT_RGBA8SN
	rgba8ui         = C.SG_PIXELFORMAT_RGBA8UI
	rgba8si         = C.SG_PIXELFORMAT_RGBA8SI
	bgra8           = C.SG_PIXELFORMAT_BGRA8
	rgb10a2         = C.SG_PIXELFORMAT_RGB10A2
	rg11b10f        = C.SG_PIXELFORMAT_RG11B10F
	rgb9e5          = C.SG_PIXELFORMAT_RGB9E5
	rg32ui          = C.SG_PIXELFORMAT_RG32UI
	rg32si          = C.SG_PIXELFORMAT_RG32SI
	rg32f           = C.SG_PIXELFORMAT_RG32F
	rgba16          = C.SG_PIXELFORMAT_RGBA16
	rgba16sn        = C.SG_PIXELFORMAT_RGBA16SN
	rgba16ui        = C.SG_PIXELFORMAT_RGBA16UI
	rgba16si        = C.SG_PIXELFORMAT_RGBA16SI
	rgba16f         = C.SG_PIXELFORMAT_RGBA16F
	rgba32ui        = C.SG_PIXELFORMAT_RGBA32UI
	rgba32si        = C.SG_PIXELFORMAT_RGBA32SI
	rgba32f         = C.SG_PIXELFORMAT_RGBA32F
	// NOTE: when adding/removing pixel formats before DEPTH, also update sokol_app.h/_SAPP_PIXELFORMAT_*
	depth           = C.SG_PIXELFORMAT_DEPTH
	depth_stencil   = C.SG_PIXELFORMAT_DEPTH_STENCIL
	// NOTE: don't put any new compressed format in front of here
	bc1_rgba        = C.SG_PIXELFORMAT_BC1_RGBA
	bc2_rgba        = C.SG_PIXELFORMAT_BC2_RGBA
	bc3_rgba        = C.SG_PIXELFORMAT_BC3_RGBA
	bc3_srgba       = C.SG_PIXELFORMAT_BC3_SRGBA
	bc4_r           = C.SG_PIXELFORMAT_BC4_R
	bc4_rsn         = C.SG_PIXELFORMAT_BC4_RSN
	bc5_rg          = C.SG_PIXELFORMAT_BC5_RG
	bc5_rgsn        = C.SG_PIXELFORMAT_BC5_RGSN
	bc6h_rgbf       = C.SG_PIXELFORMAT_BC6H_RGBF
	bc6h_rgbuf      = C.SG_PIXELFORMAT_BC6H_RGBUF
	bc7_rgba        = C.SG_PIXELFORMAT_BC7_RGBA
	bc7_srgba       = C.SG_PIXELFORMAT_BC7_SRGBA
	pvrtc_rgb_2bpp  = C.SG_PIXELFORMAT_PVRTC_RGB_2BPP // FIXME: deprecated
	pvrtc_rgb_4bpp  = C.SG_PIXELFORMAT_PVRTC_RGB_4BPP // FIXME: deprecated
	pvrtc_rgba_2bpp = C.SG_PIXELFORMAT_PVRTC_RGBA_2BPP // FIXME: deprecated
	pvrtc_rgba_4bpp = C.SG_PIXELFORMAT_PVRTC_RGBA_4BPP // FIXME: deprecated
	etc2_rgb8       = C.SG_PIXELFORMAT_ETC2_RGB8
	etc2_srgb8      = C.SG_PIXELFORMAT_ETC2_SRGB8
	etc2_rgb8a1     = C.SG_PIXELFORMAT_ETC2_RGB8A1
	etc2_rgba8      = C.SG_PIXELFORMAT_ETC2_RGBA8
	etc2_srgb8a8    = C.SG_PIXELFORMAT_ETC2_SRGB8A8
	eac_r11         = C.SG_PIXELFORMAT_EAC_R11
	eac_r11sn       = C.SG_PIXELFORMAT_EAC_R11SN
	eac_rg11        = C.SG_PIXELFORMAT_EAC_RG11
	eac_rg11sn      = C.SG_PIXELFORMAT_EAC_RG11SN
	astc_4x4_rgba   = C.SG_PIXELFORMAT_ASTC_4x4_RGBA
	astc_4x4_srgba  = C.SG_PIXELFORMAT_ASTC_4x4_SRGBA
	num             = C._SG_PIXELFORMAT_NUM
	force_u32       = C._SG_PIXELFORMAT_FORCE_U32 // 0x7FFFFFFF,
}

@[typedef]
pub struct C.sg_pixelformat_info {
pub mut:
	sample bool
}

pub type PixelformatInfo = C.sg_pixelformat_info

@[typedef]
pub struct C.sg_features {
pub mut:
	origin_top_left             bool // framebuffer and texture origin is in top left corner
	image_clamp_to_border       bool // border color and clamp-to-border UV-wrap mode is supported
	mrt_independent_blend_state bool // multiple-render-target rendering can use per-render-target blend state
	mrt_independent_write_mask  bool // multiple-render-target rendering can use per-render-target color write masks
	storage_buffer              bool // storage buffers are supported
}

pub type Features = C.sg_features

@[typedef]
pub struct C.sg_limits {
pub mut:
	max_image_size_2d                   int // max width/height of SG_IMAGETYPE_2D images
	max_image_size_cube                 int // max width/height of SG_IMAGETYPE_CUBE images
	max_image_size_3d                   int // max width/height/depth of SG_IMAGETYPE_3D images
	max_image_size_array                int // max width/height of SG_IMAGETYPE_ARRAY images
	max_image_array_layers              int // max number of layers in SG_IMAGETYPE_ARRAY images
	max_vertex_attrs                    int // max number of vertex attributes, clamped to SG_MAX_VERTEX_ATTRIBUTES
	gl_max_vertex_uniform_components    int // <= GL_MAX_VERTEX_UNIFORM_COMPONENTS (only on GL backends)
	gl_max_combined_texture_image_units int // <= GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS (only on GL backends)
}

pub type Limits = C.sg_limits

// ResourceState is C.sg_resource_state
pub enum ResourceState as u32 {
	initial    = C.SG_RESOURCESTATE_INITIAL
	alloc      = C.SG_RESOURCESTATE_ALLOC
	valid      = C.SG_RESOURCESTATE_VALID
	failed     = C.SG_RESOURCESTATE_FAILED
	invalid    = C.SG_RESOURCESTATE_INVALID
	_force_u32 = C._SG_RESOURCESTATE_FORCE_U32 // 0x7FFFFFFF,
}

// Usage is C.sg_usage
pub enum Usage as u32 {
	_default   = C._SG_USAGE_DEFAULT // value 0 reserved for default-init
	immutable  = C.SG_USAGE_IMMUTABLE
	dynamic    = C.SG_USAGE_DYNAMIC
	stream     = C.SG_USAGE_STREAM
	_num       = C._SG_USAGE_NUM
	_force_u32 = C._SG_USAGE_FORCE_U32 // 0x7FFFFFFF,
}

// BufferType is C.sg_buffer_type
pub enum BufferType as u32 {
	_default      = C._SG_BUFFERTYPE_DEFAULT // value 0 reserved for default-init
	vertexbuffer  = C.SG_BUFFERTYPE_VERTEXBUFFER
	indexbuffer   = C.SG_BUFFERTYPE_INDEXBUFFER
	storagebuffer = C.SG_BUFFERTYPE_STORAGEBUFFER
	_num          = C._SG_BUFFERTYPE_NUM
	_force_u32    = C._SG_BUFFERTYPE_FORCE_U32 // 0x7FFFFFFF,
}

// IndexType is C.sg_index_type
pub enum IndexType as u32 {
	_default   = C._SG_INDEXTYPE_DEFAULT // value 0 reserved for default-init
	@none      = C.SG_INDEXTYPE_NONE
	uint16     = C.SG_INDEXTYPE_UINT16
	uint32     = C.SG_INDEXTYPE_UINT32
	_num       = C._SG_INDEXTYPE_NUM
	_force_u32 = C._SG_INDEXTYPE_FORCE_U32 // 0x7FFFFFFF,
}

// ImageType is C.sg_image_type
pub enum ImageType as u32 {
	_default   = C._SG_IMAGETYPE_DEFAULT // value 0 reserved for default-init
	_2d        = C.SG_IMAGETYPE_2D
	cube       = C.SG_IMAGETYPE_CUBE
	_3d        = C.SG_IMAGETYPE_3D
	array      = C.SG_IMAGETYPE_ARRAY
	_num       = C._SG_IMAGETYPE_NUM
	_force_u32 = C._SG_IMAGETYPE_FORCE_U32 // 0x7FFFFFFF,
}

// ImageSampleType is C.sg_image_sample_type
pub enum ImageSampleType as u32 {
	_default           = C._SG_IMAGESAMPLETYPE_DEFAULT // value 0 reserved for default-init
	float              = C.SG_IMAGESAMPLETYPE_FLOAT
	depth              = C.SG_IMAGESAMPLETYPE_DEPTH
	sint               = C.SG_IMAGESAMPLETYPE_SINT
	uint               = C.SG_IMAGESAMPLETYPE_UINT
	unfilterable_float = C.SG_IMAGESAMPLETYPE_UNFILTERABLE_FLOAT
	_num               = C._SG_IMAGESAMPLETYPE_NUM
	_force_u32         = C._SG_IMAGESAMPLETYPE_FORCE_U32 // 0x7FFFFFFF
}

// SamplerType is C.sg_sampler_type
pub enum SamplerType as u32 {
	_default     = C._SG_SAMPLERTYPE_DEFAULT // value 0 reserved for default-init
	filtering    = C.SG_SAMPLERTYPE_FILTERING
	nonfiltering = C.SG_SAMPLERTYPE_NONFILTERING
	comparison   = C.SG_SAMPLERTYPE_COMPARISON
	_num         = C._SG_SAMPLERTYPE_NUM
	_force_u32   = C._SG_SAMPLERTYPE_FORCE_U32 // 0x7FFFFFFF
}

// CubeFace is C.sg_cube_face
pub enum CubeFace as u32 {
	pos_x      = C.SG_CUBEFACE_POS_X
	neg_x      = C.SG_CUBEFACE_NEG_X
	pos_y      = C.SG_CUBEFACE_POS_Y
	neg_y      = C.SG_CUBEFACE_NEG_Y
	pos_z      = C.SG_CUBEFACE_POS_Z
	neg_z      = C.SG_CUBEFACE_NEG_Z
	_num       = C.SG_CUBEFACE_NUM
	_force_u32 = C._SG_CUBEFACE_FORCE_U32 // 0x7FFFFFFF,
}

// ShaderStage is C.sg_shader_stage
pub enum ShaderStage as u32 {
	vs         = C.SG_SHADERSTAGE_VS
	fs         = C.SG_SHADERSTAGE_FS
	_force_u32 = C._SG_SHADERSTAGE_FORCE_U32 // 0x7FFFFFFF,
}

// PrimitiveType is C.sg_primitive_type
pub enum PrimitiveType as u32 {
	_default       = C._SG_PRIMITIVETYPE_DEFAULT // value 0 reserved for default-init
	points         = C.SG_PRIMITIVETYPE_POINTS
	lines          = C.SG_PRIMITIVETYPE_LINES
	line_strip     = C.SG_PRIMITIVETYPE_LINE_STRIP
	triangles      = C.SG_PRIMITIVETYPE_TRIANGLES
	triangle_strip = C.SG_PRIMITIVETYPE_TRIANGLE_STRIP
	_num           = C._SG_PRIMITIVETYPE_NUM
	_force_u32     = C._SG_PRIMITIVETYPE_FORCE_U32 // 0x7FFFFFFF,
}

// Filter is C.sg_filter
pub enum Filter as u32 {
	_default   = C._SG_FILTER_DEFAULT // value 0 reserved for default-init
	@none      = C.SG_FILTER_NONE // FIXME: deprecated
	nearest    = C.SG_FILTER_NEAREST
	linear     = C.SG_FILTER_LINEAR
	_num       = C._SG_FILTER_NUM
	_force_u32 = C._SG_FILTER_FORCE_U32 // 0x7FFFFFFF,
}

// Wrap is C.sg_wrap
pub enum Wrap as u32 {
	_default        = C._SG_WRAP_DEFAULT // value 0 reserved for default-init
	repeat          = C.SG_WRAP_REPEAT
	clamp_to_edge   = C.SG_WRAP_CLAMP_TO_EDGE
	clamp_to_border = C.SG_WRAP_CLAMP_TO_BORDER
	mirrored_repeat = C.SG_WRAP_MIRRORED_REPEAT
	_num            = C._SG_WRAP_NUM
	_force_u32      = C._SG_WRAP_FORCE_U32 // 0x7FFFFFFF,
}

// BorderColor is C.sg_border_color
pub enum BorderColor as u32 {
	_default          = C._SG_BORDERCOLOR_DEFAULT // value 0 reserved for default-init
	transparent_black = C.SG_BORDERCOLOR_TRANSPARENT_BLACK
	opaque_black      = C.SG_BORDERCOLOR_OPAQUE_BLACK
	opaque_white      = C.SG_BORDERCOLOR_OPAQUE_WHITE
	_num              = C._SG_BORDERCOLOR_NUM
	_force_u32        = C._SG_BORDERCOLOR_FORCE_U32 // 0x7FFFFFFF,
}

// VertexFormat is C.sg_vertex_format
pub enum VertexFormat as u32 {
	invalid    = C.SG_VERTEXFORMAT_INVALID
	float      = C.SG_VERTEXFORMAT_FLOAT
	float2     = C.SG_VERTEXFORMAT_FLOAT2
	float3     = C.SG_VERTEXFORMAT_FLOAT3
	float4     = C.SG_VERTEXFORMAT_FLOAT4
	byte4      = C.SG_VERTEXFORMAT_BYTE4
	byte4n     = C.SG_VERTEXFORMAT_BYTE4N
	ubyte4     = C.SG_VERTEXFORMAT_UBYTE4
	ubyte4n    = C.SG_VERTEXFORMAT_UBYTE4N
	short2     = C.SG_VERTEXFORMAT_SHORT2
	short2n    = C.SG_VERTEXFORMAT_SHORT2N
	ushort2n   = C.SG_VERTEXFORMAT_USHORT2N
	short4     = C.SG_VERTEXFORMAT_SHORT4
	short4n    = C.SG_VERTEXFORMAT_SHORT4N
	ushort4n   = C.SG_VERTEXFORMAT_USHORT4N
	uint10_n2  = C.SG_VERTEXFORMAT_UINT10_N2
	half2      = C.SG_VERTEXFORMAT_HALF2
	half4      = C.SG_VERTEXFORMAT_HALF4
	_num       = C._SG_VERTEXFORMAT_NUM
	_force_u32 = C._SG_VERTEXFORMAT_FORCE_U32 // 0x7FFFFFFF,
}

// VertexStep is C.sg_vertex_step
pub enum VertexStep as u32 {
	_default     = C._SG_VERTEXSTEP_DEFAULT // value 0 reserved for default-init
	per_vertex   = C.SG_VERTEXSTEP_PER_VERTEX
	per_instance = C.SG_VERTEXSTEP_PER_INSTANCE
	_num         = C._SG_VERTEXSTEP_NUM
	_force_u32   = C._SG_VERTEXSTEP_FORCE_U32 // 0x7FFFFFFF,
}

// UniformType is C.sg_uniform_type
pub enum UniformType as u32 {
	invalid    = C.SG_UNIFORMTYPE_INVALID
	float      = C.SG_UNIFORMTYPE_FLOAT
	float2     = C.SG_UNIFORMTYPE_FLOAT2
	float3     = C.SG_UNIFORMTYPE_FLOAT3
	float4     = C.SG_UNIFORMTYPE_FLOAT4
	int        = C.SG_UNIFORMTYPE_INT
	int2       = C.SG_UNIFORMTYPE_INT2
	int3       = C.SG_UNIFORMTYPE_INT3
	int4       = C.SG_UNIFORMTYPE_INT4
	mat4       = C.SG_UNIFORMTYPE_MAT4
	_num       = C._SG_UNIFORMTYPE_NUM
	_force_u32 = C._SG_UNIFORMTYPE_FORCE_U32 // 0x7FFFFFFF,
}

// UniformLayout is C.sg_uniform_layout
pub enum UniformLayout as u32 {
	_default   = C._SG_UNIFORMLAYOUT_DEFAULT // value 0 reserved for default-init
	native     = C.SG_UNIFORMLAYOUT_NATIVE // default: layout depends on currently active backend
	std140     = C.SG_UNIFORMLAYOUT_STD140 // std140: memory layout according to std140
	_num       = C._SG_UNIFORMLAYOUT_NUM
	_force_u32 = C._SG_UNIFORMLAYOUT_FORCE_U32 // 0x7FFFFFFF,
}

// CullMode is C.sg_cull_mode
pub enum CullMode as u32 {
	_default   = C._SG_CULLMODE_DEFAULT // value 0 reserved for default-init
	@none      = C.SG_CULLMODE_NONE
	front      = C.SG_CULLMODE_FRONT
	back       = C.SG_CULLMODE_BACK
	_num       = C._SG_CULLMODE_NUM
	_force_u32 = C._SG_CULLMODE_FORCE_U32 // 0x7FFFFFFF,
}

// FaceWinding is C.sg_face_winding
pub enum FaceWinding as u32 {
	_default   = C._SG_FACEWINDING_DEFAULT // value 0 reserved for default-init
	ccw        = C.SG_FACEWINDING_CCW
	cw         = C.SG_FACEWINDING_CW
	_num       = C._SG_FACEWINDING_NUM
	_force_u32 = C._SG_FACEWINDING_FORCE_U32 // 0x7FFFFFFF,
}

// CompareFunc is C.sg_compare_func
pub enum CompareFunc as u32 {
	_default      = C._SG_COMPAREFUNC_DEFAULT // value 0 reserved for default-init
	never         = C.SG_COMPAREFUNC_NEVER
	less          = C.SG_COMPAREFUNC_LESS
	equal         = C.SG_COMPAREFUNC_EQUAL
	less_equal    = C.SG_COMPAREFUNC_LESS_EQUAL
	greater       = C.SG_COMPAREFUNC_GREATER
	not_equal     = C.SG_COMPAREFUNC_NOT_EQUAL
	greater_equal = C.SG_COMPAREFUNC_GREATER_EQUAL
	always        = C.SG_COMPAREFUNC_ALWAYS
	_num          = C._SG_COMPAREFUNC_NUM
	_force_u32    = C._SG_COMPAREFUNC_FORCE_U32 // 0x7FFFFFFF,
}

// StencilOp is C.sg_stencil_op
pub enum StencilOp {
	_default   = C._SG_STENCILOP_DEFAULT // value 0 reserved for default-init
	keep       = C.SG_STENCILOP_KEEP
	zero       = C.SG_STENCILOP_ZERO
	replace    = C.SG_STENCILOP_REPLACE
	incr_clamp = C.SG_STENCILOP_INCR_CLAMP
	decr_clamp = C.SG_STENCILOP_DECR_CLAMP
	invert     = C.SG_STENCILOP_INVERT
	incr_wrap  = C.SG_STENCILOP_INCR_WRAP
	decr_wrap  = C.SG_STENCILOP_DECR_WRAP
	_num       = C._SG_STENCILOP_NUM
	_force_u32 = C._SG_STENCILOP_FORCE_U32 // 0x7FFFFFFF,
}

// BlendFactor is C.sg_blend_factor
pub enum BlendFactor as u32 {
	_default              = C._SG_BLENDFACTOR_DEFAULT // value 0 reserved for default-init
	zero                  = C.SG_BLENDFACTOR_ZERO
	one                   = C.SG_BLENDFACTOR_ONE
	src_color             = C.SG_BLENDFACTOR_SRC_COLOR
	one_minus_src_color   = C.SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR
	src_alpha             = C.SG_BLENDFACTOR_SRC_ALPHA
	one_minus_src_alpha   = C.SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA
	dst_color             = C.SG_BLENDFACTOR_DST_COLOR
	one_minus_dst_color   = C.SG_BLENDFACTOR_ONE_MINUS_DST_COLOR
	dst_alpha             = C.SG_BLENDFACTOR_DST_ALPHA
	one_minus_dst_alpha   = C.SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA
	src_alpha_saturated   = C.SG_BLENDFACTOR_SRC_ALPHA_SATURATED
	blend_color           = C.SG_BLENDFACTOR_BLEND_COLOR
	one_minus_blend_color = C.SG_BLENDFACTOR_ONE_MINUS_BLEND_COLOR
	blend_alpha           = C.SG_BLENDFACTOR_BLEND_ALPHA
	one_minus_blend_alpha = C.SG_BLENDFACTOR_ONE_MINUS_BLEND_ALPHA
	_num                  = C._SG_BLENDFACTOR_NUM
	_force_u32            = C._SG_BLENDFACTOR_FORCE_U32 // 0x7FFFFFFF,
}

// BlendOp is C.sg_blend_op
pub enum BlendOp as u32 {
	_default         = C._SG_BLENDOP_DEFAULT // value 0 reserved for default-init
	add              = C.SG_BLENDOP_ADD
	subtract         = C.SG_BLENDOP_SUBTRACT
	reverse_subtract = C.SG_BLENDOP_REVERSE_SUBTRACT
	_num             = C._SG_BLENDOP_NUM
	_force_u32       = C._SG_BLENDOP_FORCE_U32 // 0x7FFFFFFF,
}

// ColorMask is C.sg_color_mask
pub enum ColorMask as u32 {
	_default   = C._SG_COLORMASK_DEFAULT // 0, value 0 reserved for default-init
	@none      = C.SG_COLORMASK_NONE // 0x10, special value for 'all channels disabled
	r          = C.SG_COLORMASK_R // 0x1,
	g          = C.SG_COLORMASK_G // 0x2,
	rg         = C.SG_COLORMASK_RG // 0x3,
	b          = C.SG_COLORMASK_B // 0x4,
	rb         = C.SG_COLORMASK_RB // 0x5,
	gb         = C.SG_COLORMASK_GB // 0x6,
	rgb        = C.SG_COLORMASK_RGB // 0x7,
	a          = C.SG_COLORMASK_A // 0x8,
	ra         = C.SG_COLORMASK_RA // 0x9,
	ga         = C.SG_COLORMASK_GA // 0xA,
	rga        = C.SG_COLORMASK_RGA // 0xB,
	ba         = C.SG_COLORMASK_BA // 0xC,
	rba        = C.SG_COLORMASK_RBA // 0xD,
	gba        = C.SG_COLORMASK_GBA // 0xE,
	rgba       = C.SG_COLORMASK_RGBA // 0xF,
	_force_u32 = C._SG_COLORMASK_FORCE_U32 // 0x7FFFFFFF,
}

// LoadAction is C.sg_load_action
pub enum LoadAction as u32 {
	_default   = C._SG_LOADACTION_DEFAULT
	clear      = C.SG_LOADACTION_CLEAR
	load       = C.SG_LOADACTION_LOAD
	dontcare   = C.SG_LOADACTION_DONTCARE
	_force_u32 = C._SG_LOADACTION_FORCE_U32 // 0x7FFFFFFF,
}

// StoreAction is C.sg_store_action
pub enum StoreAction as u32 {
	_default   = C._SG_STOREACTION_DEFAULT
	store      = C.SG_STOREACTION_STORE
	dontcare   = C.SG_STOREACTION_DONTCARE
	_force_u32 = C._SG_STOREACTION_FORCE_U32 // 0x7FFFFFFF,
}

@[typedef]
pub struct C.sg_color_attachment_action {
pub mut:
	load_action  LoadAction  // default: SG_LOADACTION_CLEAR
	store_action StoreAction // default: SG_STOREACTION_STORE
	clear_value  Color       // default: { 0.5f, 0.5f, 0.5f, 1.0f }
}

pub type ColorAttachmentAction = C.sg_color_attachment_action

@[typedef]
pub struct C.sg_depth_attachment_action {
pub mut:
	load_action  LoadAction  // default: SG_LOADACTION_CLEAR
	store_action StoreAction // default: SG_STOREACTION_DONTCARE
	clear_value  f32 // default: 1.0
}

pub type DepthAttachmentAction = C.sg_depth_attachment_action

@[typedef]
pub struct C.sg_stencil_attachment_action {
pub mut:
	load_action  LoadAction  // default: SG_LOADACTION_CLEAR
	store_action StoreAction // default: SG_STOREACTION_DONTCARE
	clear_value  u8 // default: 0
}

pub type StencilAttachmentAction = C.sg_stencil_attachment_action

@[typedef]
pub struct C.sg_pass_action {
pub mut:
	colors  [4]ColorAttachmentAction
	depth   DepthAttachmentAction
	stencil StencilAttachmentAction
}

pub type PassAction = C.sg_pass_action

@[typedef]
pub struct C.sg_metal_swapchain {
pub mut:
	current_drawable      voidptr
	depth_stencil_texture voidptr // MTLTexture
	msaa_color_texture    voidptr // MTLTexture
}

pub type MetalSwapchain = C.sg_metal_swapchain

@[typedef]
pub struct C.sg_d3d11_swapchain {
pub mut:
	render_view        voidptr // ID3D11RenderTargetView
	resolve_view       voidptr // ID3D11RenderTargetView
	depth_stencil_view voidptr // ID3D11DepthStencilView
}

pub type D3d11Swapchain = C.sg_d3d11_swapchain

@[typedef]
pub struct C.sg_wgpu_swapchain {
pub mut:
	render_view        voidptr // WGPUTextureView
	resolve_view       voidptr // WGPUTextureView
	depth_stencil_view voidptr // WGPUTextureView
}

pub type WgpuSwapchain = C.sg_wgpu_swapchain

@[typedef]
pub struct C.sg_gl_swapchain {
pub mut:
	framebuffer u32
}

pub type GlSwapchain = C.sg_gl_swapchain

@[typedef]
pub struct C.sg_swapchain {
pub mut:
	width        int
	height       int
	sample_count int
	color_format PixelFormat
	depth_format PixelFormat
	metal        MetalSwapchain
	d3d11        D3d11Swapchain
	wgpu         WgpuSwapchain
	gl           GlSwapchain
}

pub type Swapchain = C.sg_swapchain

@[typedef]
pub struct C.sg_pass {
pub mut:
	_start_canary u32
	action        PassAction
	attachments   Attachments
	swapchain     Swapchain
	label         &char = unsafe { nil }
	_end_canary   u32
}

pub type Pass = C.sg_pass

@[typedef]
pub struct C.sg_stage_bindings {
	// TODO 	images [SG_MAX_SHADERSTAGE_IMAGES]Image
	// TODO 	samplers [SG_MAX_SHADERSTAGE_SAMPLERS]Sampler
}

pub type StageBindings = C.sg_stage_bindings

@[typedef]
pub struct C.sg_bindings {
pub mut:
	_start_canary         u32
	vertex_buffers        [8]Buffer
	vertex_buffer_offsets [8]int
	index_buffer          Buffer
	index_buffer_offset   int
	vs                    StageBindings
	fs                    StageBindings
	_end_canary           u32
}

pub type Bindings = C.sg_bindings

@[typedef]
pub struct C.sg_buffer_desc {
pub mut:
	_start_canary u32
	size          usize
	@type         BufferType
	usage         Usage
	data          Range
	label         &char = unsafe { nil }
	// optionally inject backend-specific resources
	// TODO 	gl_buffers [SG_NUM_INFLIGHT_FRAMES]u32
	// TODO 	mtl_buffers [SG_NUM_INFLIGHT_FRAMES]voidptr
	d3d11_buffer voidptr
	wgpu_buffer  voidptr
	_end_canary  u32
}

pub type BufferDesc = C.sg_buffer_desc

pub const sg_cubeface_num = 6

pub const sg_max_mipmaps = 16

@[typedef]
pub struct C.sg_image_data {
pub mut:
	subimage [sg_cubeface_num][sg_max_mipmaps]Range
}

pub type ImageData = C.sg_image_data

@[typedef]
pub struct C.sg_image_desc {
pub mut:
	_start_canary u32
	@type         ImageType
	render_target bool
	width         int
	height        int
	num_slices    int
	num_mipmaps   int
	usage         Usage
	pixel_format  PixelFormat
	sample_count  int
	data          ImageData
	label         &char = unsafe { nil }
	// optionally inject backend-specific resources
	// TODO 	gl_textures [SG_NUM_INFLIGHT_FRAMES]u32
	gl_texture_target u32
	// TODO 	mtl_textures [SG_NUM_INFLIGHT_FRAMES]voidptr
	d3d11_texture              voidptr
	d3d11_shader_resource_view voidptr
	wgpu_texture               voidptr
	wgpu_texture_view          voidptr
	_end_canary                u32
}

pub type ImageDesc = C.sg_image_desc

@[typedef]
pub struct C.sg_sampler_desc {
pub mut:
	_start_canary  u32
	min_filter     Filter
	mag_filter     Filter
	mipmap_filter  Filter
	wrap_u         Wrap
	wrap_v         Wrap
	wrap_w         Wrap
	min_lod        f32
	max_lod        f32
	border_color   BorderColor
	compare        CompareFunc
	max_anisotropy u32
	label          &char = unsafe { nil }
	// optionally inject backend-specific resources
	//

	gl_sampler    u32
	mtl_sampler   voidptr
	d3d11_sampler voidptr
	wgpu_sampler  voidptr
	_end_canary   u32
}

pub type SamplerDesc = C.sg_sampler_desc

@[typedef]
pub struct C.sg_shader_attr_desc {
pub mut:
	name &char = unsafe { nil }
}

pub type ShaderAttrDesc = C.sg_shader_attr_desc

@[typedef]
pub struct C.sg_shader_uniform_desc {
pub mut:
	name        &char = unsafe { nil }
	@type       UniformType
	array_count int
}

pub type ShaderUniformDesc = C.sg_shader_uniform_desc

@[typedef]
pub struct C.sg_shader_uniform_block_desc {
pub mut:
	size   usize
	layout UniformLayout
	// TODO 	uniforms [SG_MAX_UB_MEMBERS]ShaderUniformDesc
}

pub type ShaderUniformBlockDesc = C.sg_shader_uniform_block_desc

@[typedef]
pub struct C.sg_shader_image_desc {
pub mut:
	used         bool
	multisampled bool
	image_type   ImageType
	sample_type  ImageSampleType
}

pub type ShaderImageDesc = C.sg_shader_image_desc

@[typedef]
pub struct C.sg_shader_storage_buffer_desc {
pub mut:
	used     bool
	readonly bool
}

pub type ShaderStorageBufferDesc = C.sg_shader_storage_buffer_desc

@[typedef]
pub struct C.sg_shader_sampler_desc {
pub mut:
	used         bool
	sampler_type SamplerType
}

pub type ShaderSamplerDesc = C.sg_shader_sampler_desc

@[typedef]
pub struct C.sg_shader_image_sampler_pair_desc {
pub mut:
	used         bool
	image_slot   int
	sampler_slot int
	glsl_name    &char = unsafe { nil }
}

pub type ShaderImageSamplerPairDesc = C.sg_shader_image_sampler_pair_desc

@[typedef]
pub struct C.sg_shader_stage_desc {
pub mut:
	source       &char = unsafe { nil }
	bytecode     Range
	entry        &char = unsafe { nil }
	d3d11_target &char = unsafe { nil }
	// TODO 	uniform_blocks [SG_MAX_SHADERSTAGE_UBS]ShaderUniformBlockDesc
	// TODO 	storage_buffers[SG_MAX_SHADERSTAGE_STORAGEBUFFERS]ShaderStorageBufferDesc;
	// TODO 	images [SG_MAX_SHADERSTAGE_IMAGES]ShaderImageDesc
	// TODO 	samplers [SG_MAX_SHADERSTAGE_SAMPLERS]ShaderSamplerDesc
	// TODO 	image_sampler_pairs [SG_MAX_SHADERSTAGE_IMAGESAMPLERPAIRS]ShaderImageSamplerPairDesc
}

pub type ShaderStageDesc = C.sg_shader_stage_desc

@[typedef]
pub struct C.sg_shader_desc {
pub mut:
	_start_canary u32
	// TODO 	attrs [C.SG_MAX_VERTEX_ATTRIBUTES]ShaderAttrDesc // 16
	vs          ShaderStageDesc
	fs          ShaderStageDesc
	label       &char = unsafe { nil }
	_end_canary u32
}

pub type ShaderDesc = C.sg_shader_desc

@[typedef]
pub struct C.sg_vertex_buffer_layout_state {
pub mut:
	stride    int
	step_func VertexStep
	step_rate int
}

pub type VertexBufferLayoutState = C.sg_vertex_buffer_layout_state

@[typedef]
pub struct C.sg_vertex_attr_state {
pub mut:
	buffer_index int
	offset       int
	format       VertexFormat
}

pub type VertexAttrState = C.sg_vertex_attr_state

@[typedef]
pub struct C.sg_vertex_layout_state {
pub mut:
	buffers [8]VertexBufferLayoutState
	attrs   [16]VertexAttrState
}

pub type VertexLayoutState = C.sg_vertex_layout_state

@[typedef]
pub struct C.sg_stencil_face_state {
pub mut:
	compare       CompareFunc
	fail_op       StencilOp
	depth_fail_op StencilOp
	pass_op       StencilOp
}

pub type StencilFaceState = C.sg_stencil_face_state

@[typedef]
pub struct C.sg_stencil_state {
pub mut:
	enabled    bool
	front      StencilFaceState
	back       StencilFaceState
	read_mask  u8
	write_mask u8
	ref        u8
}

pub type StencilState = C.sg_stencil_state

@[typedef]
pub struct C.sg_depth_state {
pub mut:
	pixel_format     PixelFormat
	compare          CompareFunc
	write_enabled    bool
	bias             f32
	bias_slope_scale f32
	bias_clamp       f32
}

pub type DepthState = C.sg_depth_state

@[typedef]
pub struct C.sg_blend_state {
pub mut:
	enabled          bool
	src_factor_rgb   BlendFactor
	dst_factor_rgb   BlendFactor
	op_rgb           BlendOp
	src_factor_alpha BlendFactor
	dst_factor_alpha BlendFactor
	op_alpha         BlendOp
}

pub type BlendState = C.sg_blend_state

@[typedef]
pub struct C.sg_color_target_state {
pub mut:
	pixel_format PixelFormat
	write_mask   ColorMask
	blend        BlendState
}

pub type ColorTargetState = C.sg_color_target_state

@[typedef]
pub struct C.sg_pipeline_desc {
pub mut:
	_start_canary             u32
	shader                    Shader
	layout                    VertexLayoutState
	depth                     DepthState
	stencil                   StencilState
	color_count               int
	colors                    [4]ColorTargetState // TODO C.SG_MAX_COLOR_ATTACHMENTS enum *sigh*
	primitive_type            PrimitiveType
	index_type                IndexType
	cull_mode                 CullMode
	face_winding              FaceWinding
	sample_count              int
	blend_color               Color
	alpha_to_coverage_enabled bool
	label                     &char = unsafe { nil }
	_end_canary               u32
}

pub type PipelineDesc = C.sg_pipeline_desc

@[typedef]
pub struct C.sg_attachment_desc {
pub mut:
	image     Image
	mip_level int
	slice     int // cube texture: face
	// TODO 	texture: C.array // layer
}

pub type AttachmentDesc = C.sg_attachment_desc

@[typedef]
pub struct C.sg_attachments_desc {
pub mut:
	_start_canary u32
	colors        [4]AttachmentDesc // SG_MAX_COLOR_ATTACHMENTS
	resolves      [4]AttachmentDesc
	depth_stencil AttachmentDesc
	label         &char = unsafe { nil }
	_end_canary   u32
}

pub type AttachmentsDesc = C.sg_attachments_desc

@[typedef]
pub struct C.sg_trace_hooks {
pub mut:
	user_data           voidptr
	reset_state_cache   fn (user_data voidptr) // user_data)
	make_buffer         fn (const_desc &BufferDesc, result Buffer, user_data voidptr)           // sg_buffer_desc*
	make_image          fn (const_desc &ImageDesc, result Image, user_data voidptr)             // sg_image_desc*
	make_sampler        fn (const_desc &SamplerDesc, result Sampler, user_data voidptr)         // sg_sampler_desc*
	make_shader         fn (const_desc &ShaderDesc, result Shader, user_data voidptr)           // sg_shader_desc*
	make_pipeline       fn (const_desc &PipelineDesc, result Pipeline, user_data voidptr)       // sg_pipeline_desc*
	make_attachments    fn (const_desc &AttachmentsDesc, result Attachments, user_data voidptr) // sg_attachments_desc*
	destroy_buffer      fn (buf Buffer, user_data voidptr)       // buf,
	destroy_image       fn (img Image, user_data voidptr)        // img,
	destroy_sampler     fn (smp Sampler, user_data voidptr)      // smp,
	destroy_shader      fn (shd Shader, user_data voidptr)       // shd,
	destroy_pipeline    fn (pip Pipeline, user_data voidptr)     // pip,
	destroy_attachments fn (atts Attachments, user_data voidptr) // atts,
	update_buffer       fn (buf Buffer, const_data &Range, user_data voidptr)    // buf,
	update_image        fn (img Image, const_data &ImageData, user_data voidptr) // img,
	append_buffer       fn (buf Buffer, const_data &Range, result int, user_data voidptr) // buf,
	begin_pass          fn (const_pass &Pass, user_data voidptr) // sg_pass*
	apply_viewport      fn (x int, y int, width int, height int, origin_top_left bool, user_data voidptr) // x,
	apply_scissor_rect  fn (x int, y int, width int, height int, origin_top_left bool, user_data voidptr) // x,
	apply_pipeline      fn (pip Pipeline, user_data voidptr) // pip,
	apply_bindings      fn (const_bindings &Bindings, user_data voidptr) // sg_bindings*
	apply_uniforms      fn (stage ShaderStage, ub_index int, const_data &Range, user_data voidptr)    // stage,
	draw                fn (base_element int, num_elements int, num_instances int, user_data voidptr) // base_element,
	end_pass            fn (user_data voidptr) // user_data)
	commit              fn (user_data voidptr) // user_data)
	alloc_buffer        fn (result Buffer, user_data voidptr)       // result,
	alloc_image         fn (result Image, user_data voidptr)        // result,
	alloc_sampler       fn (result Sampler, user_data voidptr)      // result,
	alloc_shader        fn (result Shader, user_data voidptr)       // result,
	alloc_pipeline      fn (result Pipeline, user_data voidptr)     // result,
	alloc_attachments   fn (result Attachments, user_data voidptr)  // result,
	dealloc_buffer      fn (buf_id Buffer, user_data voidptr)       // buf_id,
	dealloc_image       fn (img_id Image, user_data voidptr)        // img_id,
	dealloc_sampler     fn (smp_id Sampler, user_data voidptr)      // smp_id,
	dealloc_shader      fn (shd_id Shader, user_data voidptr)       // shd_id,
	dealloc_pipeline    fn (pip_id Pipeline, user_data voidptr)     // pip_id,
	dealloc_attachments fn (atts_id Attachments, user_data voidptr) // atts_id,
	init_buffer         fn (buf_id Buffer, const_desc &BufferDesc, user_data voidptr)            // buf_id,
	init_image          fn (img_id Image, const_desc &ImageDesc, user_data voidptr)              // img_id,
	init_sampler        fn (smp_id Sampler, const_desc &SamplerDesc, user_data voidptr)          // smp_id,
	init_shader         fn (shd_id Shader, const_desc &ShaderDesc, user_data voidptr)            // shd_id,
	init_pipeline       fn (pip_id Pipeline, const_desc &PipelineDesc, user_data voidptr)        // pip_id,
	init_attachments    fn (atts_id Attachments, const_desc &AttachmentsDesc, user_data voidptr) // atts_id,
	uninit_buffer       fn (buf_id Buffer, user_data voidptr)       // buf_id,
	uninit_image        fn (img_id Image, user_data voidptr)        // img_id,
	uninit_sampler      fn (smp_id Sampler, user_data voidptr)      // smp_id,
	uninit_shader       fn (shd_id Shader, user_data voidptr)       // shd_id,
	uninit_pipeline     fn (pip_id Pipeline, user_data voidptr)     // pip_id,
	uninit_attachments  fn (atts_id Attachments, user_data voidptr) // atts_id,
	fail_buffer         fn (buf_id Buffer, user_data voidptr)       // buf_id,
	fail_image          fn (img_id Image, user_data voidptr)        // img_id,
	fail_sampler        fn (smp_id Sampler, user_data voidptr)      // smp_id,
	fail_shader         fn (shd_id Shader, user_data voidptr)       // shd_id,
	fail_pipeline       fn (pip_id Pipeline, user_data voidptr)     // pip_id,
	fail_attachments    fn (atts_id Attachments, user_data voidptr) // atts_id,
	push_debug_group    fn (const_name &char, user_data voidptr)    // char*
	pop_debug_group     fn (user_data voidptr) // user_data)
}

pub type TraceHooks = C.sg_trace_hooks

@[typedef]
pub struct C.sg_slot_info {
pub mut:
	state  ResourceState // the current state of this resource slot
	res_id u32 // type-neutral resource if (e.g. sg_buffer.id)
}

pub type SlotInfo = C.sg_slot_info

@[typedef]
pub struct C.sg_buffer_info {
pub mut:
	slot               SlotInfo // resource pool slot info
	update_frame_index u32      // frame index of last sg_update_buffer()
	append_frame_index u32      // frame index of last sg_append_buffer()
	append_pos         int      // current position in buffer for sg_append_buffer()
	append_overflow    bool     // is buffer in overflow state (due to sg_append_buffer)
	num_slots          int      // number of renaming-slots for dynamically updated buffers
	active_slot        int      // currently active write-slot for dynamically updated buffers
}

pub type BufferInfo = C.sg_buffer_info

@[typedef]
pub struct C.sg_image_info {
pub mut:
	slot            SlotInfo // resource pool slot info
	upd_frame_index u32      // frame index of last sg_update_image()
	num_slots       int      // number of renaming-slots for dynamically updated images
	active_slot     int      // currently active write-slot for dynamically updated images
}

pub type ImageInfo = C.sg_image_info

@[typedef]
pub struct C.sg_sampler_info {
pub mut:
	slot SlotInfo // resource pool slot info
}

pub type SamplerInfo = C.sg_sampler_info

@[typedef]
pub struct C.sg_shader_info {
pub mut:
	slot SlotInfo // resoure pool slot info
}

pub type ShaderInfo = C.sg_shader_info

@[typedef]
pub struct C.sg_pipeline_info {
pub mut:
	slot SlotInfo // resource pool slot info
}

pub type PipelineInfo = C.sg_pipeline_info

@[typedef]
pub struct C.sg_attachments_info {
pub mut:
	slot SlotInfo // resource pool slot info
}

pub type AttachmentsInfo = C.sg_attachments_info

@[typedef]
pub struct C.sg_frame_stats_gl {
pub mut:
	num_bind_buffer                 u32
	num_active_texture              u32
	num_bind_texture                u32
	num_bind_sampler                u32
	num_use_program                 u32
	num_render_state                u32
	num_vertex_attrib_pointer       u32
	num_vertex_attrib_divisor       u32
	num_enable_vertex_attrib_array  u32
	num_disable_vertex_attrib_array u32
	num_uniform                     u32
}

pub type FrameStatsGl = C.sg_frame_stats_gl

@[typedef]
pub struct C.sg_frame_stats_d3d11_pass {
pub mut:
	num_om_set_render_targets    u32
	num_clear_render_target_view u32
	num_clear_depth_stencil_view u32
	num_resolve_subresource      u32
}

pub type FrameStatsD3d11Pass = C.sg_frame_stats_d3d11_pass

@[typedef]
pub struct C.sg_frame_stats_d3d11_pipeline {
pub mut:
	num_rs_set_state               u32
	num_om_set_depth_stencil_state u32
	num_om_set_blend_state         u32
	num_ia_set_primitive_topology  u32
	num_ia_set_input_layout        u32
	num_vs_set_shader              u32
	num_vs_set_constant_buffers    u32
	num_ps_set_shader              u32
	num_ps_set_constant_buffers    u32
}

pub type FrameStatsD3d11Pipeline = C.sg_frame_stats_d3d11_pipeline

@[typedef]
pub struct C.sg_frame_stats_d3d11_bindings {
pub mut:
	num_ia_set_vertex_buffers   u32
	num_ia_set_index_buffer     u32
	num_vs_set_shader_resources u32
	num_ps_set_shader_resources u32
	num_vs_set_samplers         u32
	num_ps_set_samplers         u32
}

pub type FrameStatsD3d11Bindings = C.sg_frame_stats_d3d11_bindings

@[typedef]
pub struct C.sg_frame_stats_d3d11_uniforms {
pub mut:
	num_update_subresource u32
}

pub type FrameStatsD3d11Uniforms = C.sg_frame_stats_d3d11_uniforms

@[typedef]
pub struct C.sg_frame_stats_d3d11_draw {
pub mut:
	num_draw_indexed_instanced u32
	num_draw_indexed           u32
	num_draw_instanced         u32
	num_draw                   u32
}

pub type FrameStatsD3d11Draw = C.sg_frame_stats_d3d11_draw

@[typedef]
pub struct C.sg_frame_stats_d3d11 {
pub mut:
	pass      FrameStatsD3d11Pass
	pipeline  FrameStatsD3d11Pipeline
	bindings  FrameStatsD3d11Bindings
	uniforms  FrameStatsD3d11Uniforms
	draw      FrameStatsD3d11Draw
	num_map   u32
	num_unmap u32
}

pub type FrameStatsD3d11 = C.sg_frame_stats_d3d11

@[typedef]
pub struct C.sg_frame_stats_metal_idpool {
pub mut:
	num_added             u32
	num_released          u32
	num_garbage_collected u32
}

pub type FrameStatsMetalIdpool = C.sg_frame_stats_metal_idpool

@[typedef]
pub struct C.sg_frame_stats_metal_pipeline {
pub mut:
	num_set_blend_color             u32
	num_set_cull_mode               u32
	num_set_front_facing_winding    u32
	num_set_stencil_reference_value u32
	num_set_depth_bias              u32
	num_set_render_pipeline_state   u32
	num_set_depth_stencil_state     u32
}

pub type FrameStatsMetalPipeline = C.sg_frame_stats_metal_pipeline

@[typedef]
pub struct C.sg_frame_stats_metal_bindings {
pub mut:
	num_set_vertex_buffer          u32
	num_set_vertex_texture         u32
	num_set_vertex_sampler_state   u32
	num_set_fragment_buffer        u32
	num_set_fragment_texture       u32
	num_set_fragment_sampler_state u32
}

pub type FrameStatsMetalBindings = C.sg_frame_stats_metal_bindings

@[typedef]
pub struct C.sg_frame_stats_metal_uniforms {
pub mut:
	num_set_vertex_buffer_offset   u32
	num_set_fragment_buffer_offset u32
}

pub type FrameStatsMetalUniforms = C.sg_frame_stats_metal_uniforms

@[typedef]
pub struct C.sg_frame_stats_metal {
pub mut:
	idpool   FrameStatsMetalIdpool
	pipeline FrameStatsMetalPipeline
	bindings FrameStatsMetalBindings
	uniforms FrameStatsMetalUniforms
}

pub type FrameStatsMetal = C.sg_frame_stats_metal

@[typedef]
pub struct C.sg_frame_stats_wgpu_uniforms {
pub mut:
	num_set_bindgroup u32
	size_write_buffer u32
}

pub type FrameStatsWgpuUniforms = C.sg_frame_stats_wgpu_uniforms

@[typedef]
pub struct C.sg_frame_stats_wgpu_bindings {
pub mut:
	num_set_vertex_buffer                    u32
	num_skip_redundant_vertex_buffer         u32
	num_set_index_buffer                     u32
	num_skip_redundant_index_buffer          u32
	num_create_bindgroup                     u32
	num_discard_bindgroup                    u32
	num_set_bindgroup                        u32
	num_skip_redundant_bindgroup             u32
	num_bindgroup_cache_hits                 u32
	num_bindgroup_cache_misses               u32
	num_bindgroup_cache_collisions           u32
	num_bindgroup_cache_hash_vs_key_mismatch u32
}

pub type FrameStatsWgpuBindings = C.sg_frame_stats_wgpu_bindings

@[typedef]
pub struct C.sg_frame_stats_wgpu {
pub mut:
	uniforms FrameStatsWgpuUniforms
	bindings FrameStatsWgpuBindings
}

pub type FrameStatsWgpu = C.sg_frame_stats_wgpu

@[typedef]
pub struct C.sg_frame_stats {
pub mut:
	frame_index u32
	// current frame counter, starts at 0 uint32_t num_passes
	//

	num_apply_viewport     u32
	num_apply_scissor_rect u32
	num_apply_pipeline     u32
	num_apply_bindings     u32
	num_apply_uniforms     u32
	num_draw               u32
	num_update_buffer      u32
	num_append_buffer      u32
	num_update_image       u32
	size_apply_uniforms    u32
	size_update_buffer     u32
	size_append_buffer     u32
	size_update_image      u32
	gl                     FrameStatsGl
	d3d11                  FrameStatsD3d11
	metal                  FrameStatsMetal
	wgpu                   FrameStatsWgpu
}

pub type FrameStats = C.sg_frame_stats

/*
TODO Non-numerical: #define _SG_LOG_ITEMS \
*/

/*
TODO Non-numerical: #define _SG_LOGITEM_XMACRO(item,msg) SG_LOGITEM_##item,
*/

// LogItem is C.sg_log_item
// pub enum LogItem {
//	s = C._SG_LOG_ITEMS
//}

@[typedef]
pub struct C.sg_environment_defaults {
pub mut:
	color_format PixelFormat
	depth_format PixelFormat
	sample_count int
}

pub type EnvironmentDefaults = C.sg_environment_defaults

@[typedef]
pub struct C.sg_metal_environment {
pub mut:
	device voidptr
}

pub type MetalEnvironment = C.sg_metal_environment

@[typedef]
pub struct C.sg_d3d11_environment {
pub mut:
	device         voidptr
	device_context voidptr
}

pub type D3d11Environment = C.sg_d3d11_environment

@[typedef]
pub struct C.sg_wgpu_environment {
pub mut:
	device voidptr
}

pub type WgpuEnvironment = C.sg_wgpu_environment

@[typedef]
pub struct C.sg_environment {
pub mut:
	defaults EnvironmentDefaults
	metal    MetalEnvironment
	d3d11    D3d11Environment
	wgpu     WgpuEnvironment
}

pub type Environment = C.sg_environment

@[typedef]
pub struct C.sg_commit_listener {
pub mut:
	func      fn (user_data voidptr) // user_data)
	user_data voidptr
}

pub type CommitListener = C.sg_commit_listener

@[typedef]
pub struct C.sg_allocator {
pub mut:
	alloc_fn  fn (size usize, user_data voidptr) voidptr // size,
	free_fn   fn (ptr voidptr, user_data voidptr)        // ptr,
	user_data voidptr
}

pub type Allocator = C.sg_allocator

pub type LoggerFn = fn (const_tag &char, log_level u32, log_item_id u32, message_or_null &char, line_nr u32, filename_or_null &char, user_data voidptr)

/*
sg_logger

    Used in sg_desc to provide a logging function. Please be aware
    that without logging function, sokol-gfx will be completely
    silent, e.g. it will not report errors, warnings and
    validation layer messages. For maximum error verbosity,
    compile in debug mode (e.g. NDEBUG *not* defined) and install
    a logger (for instance the standard logging function from sokol_log.h).
*/
@[typedef]
pub struct C.sg_logger {
pub mut:
	func      LoggerFn
	user_data voidptr
}

pub type Logger = C.sg_logger

@[typedef]
pub struct C.sg_desc {
pub mut:
	_start_canary                                   u32
	buffer_pool_size                                int
	image_pool_size                                 int
	sampler_pool_size                               int
	shader_pool_size                                int
	pipeline_pool_size                              int
	attachments_pool_size                           int
	uniform_buffer_size                             int
	max_commit_listeners                            int
	disable_validation                              bool // disable validation layer even in debug mode, useful for tests
	mtl_force_managed_storage_mode                  bool // for debugging: use Metal managed storage mode for resources even with UMA
	mtl_use_command_buffer_with_retained_references bool // Metal: use a managed MTLCommandBuffer which ref-counts used resources
	wgpu_disable_bindgroups_cache                   bool // set to true to disable the WebGPU backend BindGroup cache
	wgpu_bindgroups_cache_size                      int  // number of slots in the WebGPU bindgroup cache (must be 2^N)
	allocator                                       Allocator
	logger                                          Logger // optional log function override
	environment                                     Environment
	_end_canary                                     u32
}

pub type Desc = C.sg_desc

// C: `SOKOL_GFX_API_DECL void sg_setup(const sg_desc* desc)`
fn C.sg_setup(const_desc &Desc)

// setup setups and misc functions
pub fn setup(const_desc &Desc) {
	C.sg_setup(const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_shutdown(void)`
fn C.sg_shutdown()

// shutdown is currently undocumented
pub fn shutdown() {
	C.sg_shutdown()
}

// C: `SOKOL_GFX_API_DECL bool sg_isvalid(void)`
fn C.sg_isvalid() bool

// isvalid is currently undocumented
pub fn isvalid() bool {
	return C.sg_isvalid()
}

// C: `SOKOL_GFX_API_DECL void sg_reset_state_cache(void)`
fn C.sg_reset_state_cache()

// reset_state_cache is currently undocumented
pub fn reset_state_cache() {
	C.sg_reset_state_cache()
}

// C: `SOKOL_GFX_API_DECL sg_trace_hooks sg_install_trace_hooks(const sg_trace_hooks* trace_hooks)`
fn C.sg_install_trace_hooks(const_trace_hooks &TraceHooks) TraceHooks

// install_trace_hooks is currently undocumented
pub fn install_trace_hooks(const_trace_hooks &TraceHooks) TraceHooks {
	return C.sg_install_trace_hooks(const_trace_hooks)
}

// C: `SOKOL_GFX_API_DECL void sg_push_debug_group(const char* name)`
fn C.sg_push_debug_group(const_name &char)

// push_debug_group is currently undocumented
pub fn push_debug_group(const_name &char) {
	C.sg_push_debug_group(const_name)
}

// C: `SOKOL_GFX_API_DECL void sg_pop_debug_group(void)`
fn C.sg_pop_debug_group()

// pop_debug_group is currently undocumented
pub fn pop_debug_group() {
	C.sg_pop_debug_group()
}

// C: `SOKOL_GFX_API_DECL bool sg_add_commit_listener(sg_commit_listener listener)`
fn C.sg_add_commit_listener(listener CommitListener) bool

// add_commit_listener is currently undocumented
pub fn add_commit_listener(listener CommitListener) bool {
	return C.sg_add_commit_listener(listener)
}

// C: `SOKOL_GFX_API_DECL bool sg_remove_commit_listener(sg_commit_listener listener)`
fn C.sg_remove_commit_listener(listener CommitListener) bool

// remove_commit_listener is currently undocumented
pub fn remove_commit_listener(listener CommitListener) bool {
	return C.sg_remove_commit_listener(listener)
}

// C: `SOKOL_GFX_API_DECL sg_buffer sg_make_buffer(const sg_buffer_desc* desc)`
fn C.sg_make_buffer(const_desc &BufferDesc) Buffer

// make_buffer resources creation, destruction and updating
pub fn make_buffer(const_desc &BufferDesc) Buffer {
	return C.sg_make_buffer(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_image sg_make_image(const sg_image_desc* desc)`
fn C.sg_make_image(const_desc &ImageDesc) Image

// make_image is currently undocumented
pub fn make_image(const_desc &ImageDesc) Image {
	return C.sg_make_image(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_sampler sg_make_sampler(const sg_sampler_desc* desc)`
fn C.sg_make_sampler(const_desc &SamplerDesc) Sampler

// make_sampler is currently undocumented
pub fn make_sampler(const_desc &SamplerDesc) Sampler {
	return C.sg_make_sampler(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_shader sg_make_shader(const sg_shader_desc* desc)`
fn C.sg_make_shader(const_desc &ShaderDesc) Shader

// make_shader is currently undocumented
pub fn make_shader(const_desc &ShaderDesc) Shader {
	return C.sg_make_shader(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_pipeline sg_make_pipeline(const sg_pipeline_desc* desc)`
fn C.sg_make_pipeline(const_desc &PipelineDesc) Pipeline

// make_pipeline is currently undocumented
pub fn make_pipeline(const_desc &PipelineDesc) Pipeline {
	return C.sg_make_pipeline(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_attachments sg_make_attachments(const sg_attachments_desc* desc)`
fn C.sg_make_attachments(const_desc &AttachmentsDesc) Attachments

// make_attachments is currently undocumented
pub fn make_attachments(const_desc &AttachmentsDesc) Attachments {
	return C.sg_make_attachments(const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_destroy_buffer(sg_buffer buf)`
fn C.sg_destroy_buffer(buf Buffer)

// destroy_buffer is currently undocumented
pub fn destroy_buffer(buf Buffer) {
	C.sg_destroy_buffer(buf)
}

// C: `SOKOL_GFX_API_DECL void sg_destroy_image(sg_image img)`
fn C.sg_destroy_image(img Image)

// destroy_image is currently undocumented
pub fn destroy_image(img Image) {
	C.sg_destroy_image(img)
}

// C: `SOKOL_GFX_API_DECL void sg_destroy_sampler(sg_sampler smp)`
fn C.sg_destroy_sampler(smp Sampler)

// destroy_sampler is currently undocumented
pub fn destroy_sampler(smp Sampler) {
	C.sg_destroy_sampler(smp)
}

// C: `SOKOL_GFX_API_DECL void sg_destroy_shader(sg_shader shd)`
fn C.sg_destroy_shader(shd Shader)

// destroy_shader is currently undocumented
pub fn destroy_shader(shd Shader) {
	C.sg_destroy_shader(shd)
}

// C: `SOKOL_GFX_API_DECL void sg_destroy_pipeline(sg_pipeline pip)`
fn C.sg_destroy_pipeline(pip Pipeline)

// destroy_pipeline is currently undocumented
pub fn destroy_pipeline(pip Pipeline) {
	C.sg_destroy_pipeline(pip)
}

// C: `SOKOL_GFX_API_DECL void sg_destroy_attachments(sg_attachments atts)`
fn C.sg_destroy_attachments(atts Attachments)

// destroy_attachments is currently undocumented
pub fn destroy_attachments(atts Attachments) {
	C.sg_destroy_attachments(atts)
}

// C: `SOKOL_GFX_API_DECL void sg_update_buffer(sg_buffer buf, const sg_range* data)`
fn C.sg_update_buffer(buf Buffer, const_data &Range)

// update_buffer is currently undocumented
pub fn update_buffer(buf Buffer, const_data &Range) {
	C.sg_update_buffer(buf, const_data)
}

// C: `SOKOL_GFX_API_DECL void sg_update_image(sg_image img, const sg_image_data* data)`
fn C.sg_update_image(img Image, const_data &ImageData)

// update_image is currently undocumented
pub fn update_image(img Image, const_data &ImageData) {
	C.sg_update_image(img, const_data)
}

// C: `SOKOL_GFX_API_DECL int sg_append_buffer(sg_buffer buf, const sg_range* data)`
fn C.sg_append_buffer(buf Buffer, const_data &Range) int

// append_buffer is currently undocumented
pub fn append_buffer(buf Buffer, const_data &Range) int {
	return C.sg_append_buffer(buf, const_data)
}

// C: `SOKOL_GFX_API_DECL bool sg_query_buffer_overflow(sg_buffer buf)`
fn C.sg_query_buffer_overflow(buf Buffer) bool

// query_buffer_overflow is currently undocumented
pub fn query_buffer_overflow(buf Buffer) bool {
	return C.sg_query_buffer_overflow(buf)
}

// C: `SOKOL_GFX_API_DECL bool sg_query_buffer_will_overflow(sg_buffer buf, size_t size)`
fn C.sg_query_buffer_will_overflow(buf Buffer, size usize) bool

// query_buffer_will_overflow is currently undocumented
pub fn query_buffer_will_overflow(buf Buffer, size usize) bool {
	return C.sg_query_buffer_will_overflow(buf, size)
}

// C: `SOKOL_GFX_API_DECL void sg_begin_pass(const sg_pass* pass)`
fn C.sg_begin_pass(const_pass &Pass)

// begin_pass //s rendering functions
pub fn begin_pass(const_pass &Pass) {
	C.sg_begin_pass(const_pass)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_viewport(int x, int y, int width, int height, bool origin_top_left)`
fn C.sg_apply_viewport(x int, y int, width int, height int, origin_top_left bool)

// apply_viewport is currently undocumented
pub fn apply_viewport(x int, y int, width int, height int, origin_top_left bool) {
	C.sg_apply_viewport(x, y, width, height, origin_top_left)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_viewportf(float x, float y, float width, float height, bool origin_top_left)`
fn C.sg_apply_viewportf(x f32, y f32, width f32, height f32, origin_top_left bool)

// apply_viewportf is currently undocumented
pub fn apply_viewportf(x f32, y f32, width f32, height f32, origin_top_left bool) {
	C.sg_apply_viewportf(x, y, width, height, origin_top_left)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_scissor_rect(int x, int y, int width, int height, bool origin_top_left)`
fn C.sg_apply_scissor_rect(x int, y int, width int, height int, origin_top_left bool)

// apply_scissor_rect is currently undocumented
pub fn apply_scissor_rect(x int, y int, width int, height int, origin_top_left bool) {
	C.sg_apply_scissor_rect(x, y, width, height, origin_top_left)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_scissor_rectf(float x, float y, float width, float height, bool origin_top_left)`
fn C.sg_apply_scissor_rectf(x f32, y f32, width f32, height f32, origin_top_left bool)

// apply_scissor_rectf is currently undocumented
pub fn apply_scissor_rectf(x f32, y f32, width f32, height f32, origin_top_left bool) {
	C.sg_apply_scissor_rectf(x, y, width, height, origin_top_left)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_pipeline(sg_pipeline pip)`
fn C.sg_apply_pipeline(pip Pipeline)

// apply_pipeline is currently undocumented
pub fn apply_pipeline(pip Pipeline) {
	C.sg_apply_pipeline(pip)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_bindings(const sg_bindings* bindings)`
fn C.sg_apply_bindings(const_bindings &Bindings)

// apply_bindings is currently undocumented
pub fn apply_bindings(const_bindings &Bindings) {
	C.sg_apply_bindings(const_bindings)
}

// C: `SOKOL_GFX_API_DECL void sg_apply_uniforms(sg_shader_stage stage, int ub_index, const sg_range* data)`
fn C.sg_apply_uniforms(stage ShaderStage, ub_index int, const_data &Range)

// apply_uniforms is currently undocumented
pub fn apply_uniforms(stage ShaderStage, ub_index int, const_data &Range) {
	C.sg_apply_uniforms(stage, ub_index, const_data)
}

// C: `SOKOL_GFX_API_DECL void sg_draw(int base_element, int num_elements, int num_instances)`
fn C.sg_draw(base_element int, num_elements int, num_instances int)

// draw is currently undocumented
pub fn draw(base_element int, num_elements int, num_instances int) {
	C.sg_draw(base_element, num_elements, num_instances)
}

// C: `SOKOL_GFX_API_DECL void sg_end_pass(void)`
fn C.sg_end_pass()

// end_pass is currently undocumented
pub fn end_pass() {
	C.sg_end_pass()
}

// C: `SOKOL_GFX_API_DECL void sg_commit(void)`
fn C.sg_commit()

// commit is currently undocumented
pub fn commit() {
	C.sg_commit()
}

// C: `SOKOL_GFX_API_DECL sg_desc sg_query_desc(void)`
fn C.sg_query_desc() Desc

// query_desc getting information
pub fn query_desc() Desc {
	return C.sg_query_desc()
}

// C: `SOKOL_GFX_API_DECL sg_backend sg_query_backend(void)`
fn C.sg_query_backend() Backend

// query_backend is currently undocumented
pub fn query_backend() Backend {
	return C.sg_query_backend()
}

// C: `SOKOL_GFX_API_DECL sg_features sg_query_features(void)`
fn C.sg_query_features() Features

// query_features is currently undocumented
pub fn query_features() Features {
	return C.sg_query_features()
}

// C: `SOKOL_GFX_API_DECL sg_limits sg_query_limits(void)`
fn C.sg_query_limits() Limits

// query_limits is currently undocumented
pub fn query_limits() Limits {
	return C.sg_query_limits()
}

// C: `SOKOL_GFX_API_DECL sg_pixelformat_info sg_query_pixelformat(sg_pixel_format fmt)`
fn C.sg_query_pixelformat(fmt PixelFormat) PixelformatInfo

// query_pixelformat is currently undocumented
pub fn query_pixelformat(fmt PixelFormat) PixelformatInfo {
	return C.sg_query_pixelformat(fmt)
}

// C: `SOKOL_GFX_API_DECL int sg_query_row_pitch(sg_pixel_format fmt, int width, int row_align_bytes)`
fn C.sg_query_row_pitch(fmt PixelFormat, width int, row_align_bytes int) int

// query_row_pitch is currently undocumented
pub fn query_row_pitch(fmt PixelFormat, width int, row_align_bytes int) int {
	return C.sg_query_row_pitch(fmt, width, row_align_bytes)
}

// C: `SOKOL_GFX_API_DECL int sg_query_surface_pitch(sg_pixel_format fmt, int width, int height, int row_align_bytes)`
fn C.sg_query_surface_pitch(fmt PixelFormat, width int, height int, row_align_bytes int) int

// query_surface_pitch is currently undocumented
pub fn query_surface_pitch(fmt PixelFormat, width int, height int, row_align_bytes int) int {
	return C.sg_query_surface_pitch(fmt, width, height, row_align_bytes)
}

// C: `SOKOL_GFX_API_DECL sg_resource_state sg_query_buffer_state(sg_buffer buf)`
fn C.sg_query_buffer_state(buf Buffer) ResourceState

// query_buffer_state gets current state of a resource (INITIAL, ALLOC, VALID, FAILED, INVALID)
pub fn query_buffer_state(buf Buffer) ResourceState {
	return C.sg_query_buffer_state(buf)
}

// C: `SOKOL_GFX_API_DECL sg_resource_state sg_query_image_state(sg_image img)`
fn C.sg_query_image_state(img Image) ResourceState

// query_image_state is currently undocumented
pub fn query_image_state(img Image) ResourceState {
	return C.sg_query_image_state(img)
}

// C: `SOKOL_GFX_API_DECL sg_resource_state sg_query_sampler_state(sg_sampler smp)`
fn C.sg_query_sampler_state(smp Sampler) ResourceState

// query_sampler_state is currently undocumented
pub fn query_sampler_state(smp Sampler) ResourceState {
	return C.sg_query_sampler_state(smp)
}

// C: `SOKOL_GFX_API_DECL sg_resource_state sg_query_shader_state(sg_shader shd)`
fn C.sg_query_shader_state(shd Shader) ResourceState

// query_shader_state is currently undocumented
pub fn query_shader_state(shd Shader) ResourceState {
	return C.sg_query_shader_state(shd)
}

// C: `SOKOL_GFX_API_DECL sg_resource_state sg_query_pipeline_state(sg_pipeline pip)`
fn C.sg_query_pipeline_state(pip Pipeline) ResourceState

// query_pipeline_state is currently undocumented
pub fn query_pipeline_state(pip Pipeline) ResourceState {
	return C.sg_query_pipeline_state(pip)
}

// C: `SOKOL_GFX_API_DECL sg_resource_state sg_query_attachments_state(sg_attachments atts)`
fn C.sg_query_attachments_state(atts Attachments) ResourceState

// query_attachments_state is currently undocumented
pub fn query_attachments_state(atts Attachments) ResourceState {
	return C.sg_query_attachments_state(atts)
}

// C: `SOKOL_GFX_API_DECL sg_buffer_info sg_query_buffer_info(sg_buffer buf)`
fn C.sg_query_buffer_info(buf Buffer) BufferInfo

// query_buffer_info gets runtime information about a resource
pub fn query_buffer_info(buf Buffer) BufferInfo {
	return C.sg_query_buffer_info(buf)
}

// C: `SOKOL_GFX_API_DECL sg_image_info sg_query_image_info(sg_image img)`
fn C.sg_query_image_info(img Image) ImageInfo

// query_image_info is currently undocumented
pub fn query_image_info(img Image) ImageInfo {
	return C.sg_query_image_info(img)
}

// C: `SOKOL_GFX_API_DECL sg_sampler_info sg_query_sampler_info(sg_sampler smp)`
fn C.sg_query_sampler_info(smp Sampler) SamplerInfo

// query_sampler_info is currently undocumented
pub fn query_sampler_info(smp Sampler) SamplerInfo {
	return C.sg_query_sampler_info(smp)
}

// C: `SOKOL_GFX_API_DECL sg_shader_info sg_query_shader_info(sg_shader shd)`
fn C.sg_query_shader_info(shd Shader) ShaderInfo

// query_shader_info is currently undocumented
pub fn query_shader_info(shd Shader) ShaderInfo {
	return C.sg_query_shader_info(shd)
}

// C: `SOKOL_GFX_API_DECL sg_pipeline_info sg_query_pipeline_info(sg_pipeline pip)`
fn C.sg_query_pipeline_info(pip Pipeline) PipelineInfo

// query_pipeline_info is currently undocumented
pub fn query_pipeline_info(pip Pipeline) PipelineInfo {
	return C.sg_query_pipeline_info(pip)
}

// C: `SOKOL_GFX_API_DECL sg_attachments_info sg_query_attachments_info(sg_attachments atts)`
fn C.sg_query_attachments_info(atts Attachments) AttachmentsInfo

// query_attachments_info is currently undocumented
pub fn query_attachments_info(atts Attachments) AttachmentsInfo {
	return C.sg_query_attachments_info(atts)
}

// C: `SOKOL_GFX_API_DECL sg_buffer_desc sg_query_buffer_desc(sg_buffer buf)`
fn C.sg_query_buffer_desc(buf Buffer) BufferDesc

// query_buffer_desc gets desc structs matching a specific resource (NOTE that not all creation attributes may be provided)
pub fn query_buffer_desc(buf Buffer) BufferDesc {
	return C.sg_query_buffer_desc(buf)
}

// C: `SOKOL_GFX_API_DECL sg_image_desc sg_query_image_desc(sg_image img)`
fn C.sg_query_image_desc(img Image) ImageDesc

// query_image_desc is currently undocumented
pub fn query_image_desc(img Image) ImageDesc {
	return C.sg_query_image_desc(img)
}

// C: `SOKOL_GFX_API_DECL sg_sampler_desc sg_query_sampler_desc(sg_sampler smp)`
fn C.sg_query_sampler_desc(smp Sampler) SamplerDesc

// query_sampler_desc is currently undocumented
pub fn query_sampler_desc(smp Sampler) SamplerDesc {
	return C.sg_query_sampler_desc(smp)
}

// C: `SOKOL_GFX_API_DECL sg_shader_desc sg_query_shader_desc(sg_shader shd)`
fn C.sg_query_shader_desc(shd Shader) ShaderDesc

// query_shader_desc is currently undocumented
pub fn query_shader_desc(shd Shader) ShaderDesc {
	return C.sg_query_shader_desc(shd)
}

// C: `SOKOL_GFX_API_DECL sg_pipeline_desc sg_query_pipeline_desc(sg_pipeline pip)`
fn C.sg_query_pipeline_desc(pip Pipeline) PipelineDesc

// query_pipeline_desc is currently undocumented
pub fn query_pipeline_desc(pip Pipeline) PipelineDesc {
	return C.sg_query_pipeline_desc(pip)
}

// C: `SOKOL_GFX_API_DECL sg_attachments_desc sg_query_attachments_desc(sg_attachments atts)`
fn C.sg_query_attachments_desc(atts Attachments) AttachmentsDesc

// query_attachments_desc is currently undocumented
pub fn query_attachments_desc(atts Attachments) AttachmentsDesc {
	return C.sg_query_attachments_desc(atts)
}

// C: `SOKOL_GFX_API_DECL sg_buffer_desc sg_query_buffer_defaults(const sg_buffer_desc* desc)`
fn C.sg_query_buffer_defaults(const_desc &BufferDesc) BufferDesc

// query_buffer_defaults gets resource creation desc struct with their default values replaced
pub fn query_buffer_defaults(const_desc &BufferDesc) BufferDesc {
	return C.sg_query_buffer_defaults(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_image_desc sg_query_image_defaults(const sg_image_desc* desc)`
fn C.sg_query_image_defaults(const_desc &ImageDesc) ImageDesc

// query_image_defaults is currently undocumented
pub fn query_image_defaults(const_desc &ImageDesc) ImageDesc {
	return C.sg_query_image_defaults(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_sampler_desc sg_query_sampler_defaults(const sg_sampler_desc* desc)`
fn C.sg_query_sampler_defaults(const_desc &SamplerDesc) SamplerDesc

// query_sampler_defaults is currently undocumented
pub fn query_sampler_defaults(const_desc &SamplerDesc) SamplerDesc {
	return C.sg_query_sampler_defaults(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_shader_desc sg_query_shader_defaults(const sg_shader_desc* desc)`
fn C.sg_query_shader_defaults(const_desc &ShaderDesc) ShaderDesc

// query_shader_defaults is currently undocumented
pub fn query_shader_defaults(const_desc &ShaderDesc) ShaderDesc {
	return C.sg_query_shader_defaults(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_pipeline_desc sg_query_pipeline_defaults(const sg_pipeline_desc* desc)`
fn C.sg_query_pipeline_defaults(const_desc &PipelineDesc) PipelineDesc

// query_pipeline_defaults is currently undocumented
pub fn query_pipeline_defaults(const_desc &PipelineDesc) PipelineDesc {
	return C.sg_query_pipeline_defaults(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_attachments_desc sg_query_attachments_defaults(const sg_attachments_desc* desc)`
fn C.sg_query_attachments_defaults(const_desc &AttachmentsDesc) AttachmentsDesc

// query_attachments_defaults is currently undocumented
pub fn query_attachments_defaults(const_desc &AttachmentsDesc) AttachmentsDesc {
	return C.sg_query_attachments_defaults(const_desc)
}

// C: `SOKOL_GFX_API_DECL sg_buffer sg_alloc_buffer(void)`
fn C.sg_alloc_buffer() Buffer

// alloc_buffer separates resource allocation and initialization (for async setup)
pub fn alloc_buffer() Buffer {
	return C.sg_alloc_buffer()
}

// C: `SOKOL_GFX_API_DECL sg_image sg_alloc_image(void)`
fn C.sg_alloc_image() Image

// alloc_image is currently undocumented
pub fn alloc_image() Image {
	return C.sg_alloc_image()
}

// C: `SOKOL_GFX_API_DECL sg_sampler sg_alloc_sampler(void)`
fn C.sg_alloc_sampler() Sampler

// alloc_sampler is currently undocumented
pub fn alloc_sampler() Sampler {
	return C.sg_alloc_sampler()
}

// C: `SOKOL_GFX_API_DECL sg_shader sg_alloc_shader(void)`
fn C.sg_alloc_shader() Shader

// alloc_shader is currently undocumented
pub fn alloc_shader() Shader {
	return C.sg_alloc_shader()
}

// C: `SOKOL_GFX_API_DECL sg_pipeline sg_alloc_pipeline(void)`
fn C.sg_alloc_pipeline() Pipeline

// alloc_pipeline is currently undocumented
pub fn alloc_pipeline() Pipeline {
	return C.sg_alloc_pipeline()
}

// C: `SOKOL_GFX_API_DECL sg_attachments sg_alloc_attachments(void)`
fn C.sg_alloc_attachments() Attachments

// alloc_attachments is currently undocumented
pub fn alloc_attachments() Attachments {
	return C.sg_alloc_attachments()
}

// C: `SOKOL_GFX_API_DECL void sg_dealloc_buffer(sg_buffer buf)`
fn C.sg_dealloc_buffer(buf Buffer)

// dealloc_buffer is currently undocumented
pub fn dealloc_buffer(buf Buffer) {
	C.sg_dealloc_buffer(buf)
}

// C: `SOKOL_GFX_API_DECL void sg_dealloc_image(sg_image img)`
fn C.sg_dealloc_image(img Image)

// dealloc_image is currently undocumented
pub fn dealloc_image(img Image) {
	C.sg_dealloc_image(img)
}

// C: `SOKOL_GFX_API_DECL void sg_dealloc_sampler(sg_sampler smp)`
fn C.sg_dealloc_sampler(smp Sampler)

// dealloc_sampler is currently undocumented
pub fn dealloc_sampler(smp Sampler) {
	C.sg_dealloc_sampler(smp)
}

// C: `SOKOL_GFX_API_DECL void sg_dealloc_shader(sg_shader shd)`
fn C.sg_dealloc_shader(shd Shader)

// dealloc_shader is currently undocumented
pub fn dealloc_shader(shd Shader) {
	C.sg_dealloc_shader(shd)
}

// C: `SOKOL_GFX_API_DECL void sg_dealloc_pipeline(sg_pipeline pip)`
fn C.sg_dealloc_pipeline(pip Pipeline)

// dealloc_pipeline is currently undocumented
pub fn dealloc_pipeline(pip Pipeline) {
	C.sg_dealloc_pipeline(pip)
}

// C: `SOKOL_GFX_API_DECL void sg_dealloc_attachments(sg_attachments attachments)`
fn C.sg_dealloc_attachments(attachments Attachments)

// dealloc_attachments is currently undocumented
pub fn dealloc_attachments(attachments Attachments) {
	C.sg_dealloc_attachments(attachments)
}

// C: `SOKOL_GFX_API_DECL void sg_init_buffer(sg_buffer buf, const sg_buffer_desc* desc)`
fn C.sg_init_buffer(buf Buffer, const_desc &BufferDesc)

// init_buffer is currently undocumented
pub fn init_buffer(buf Buffer, const_desc &BufferDesc) {
	C.sg_init_buffer(buf, const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_init_image(sg_image img, const sg_image_desc* desc)`
fn C.sg_init_image(img Image, const_desc &ImageDesc)

// init_image is currently undocumented
pub fn init_image(img Image, const_desc &ImageDesc) {
	C.sg_init_image(img, const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_init_sampler(sg_sampler smg, const sg_sampler_desc* desc)`
fn C.sg_init_sampler(smg Sampler, const_desc &SamplerDesc)

// init_sampler is currently undocumented
pub fn init_sampler(smg Sampler, const_desc &SamplerDesc) {
	C.sg_init_sampler(smg, const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_init_shader(sg_shader shd, const sg_shader_desc* desc)`
fn C.sg_init_shader(shd Shader, const_desc &ShaderDesc)

// init_shader is currently undocumented
pub fn init_shader(shd Shader, const_desc &ShaderDesc) {
	C.sg_init_shader(shd, const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_init_pipeline(sg_pipeline pip, const sg_pipeline_desc* desc)`
fn C.sg_init_pipeline(pip Pipeline, const_desc &PipelineDesc)

// init_pipeline is currently undocumented
pub fn init_pipeline(pip Pipeline, const_desc &PipelineDesc) {
	C.sg_init_pipeline(pip, const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_init_attachments(sg_attachments attachments, const sg_attachments_desc* desc)`
fn C.sg_init_attachments(attachments Attachments, const_desc &AttachmentsDesc)

// init_attachments is currently undocumented
pub fn init_attachments(attachments Attachments, const_desc &AttachmentsDesc) {
	C.sg_init_attachments(attachments, const_desc)
}

// C: `SOKOL_GFX_API_DECL void sg_uninit_buffer(sg_buffer buf)`
fn C.sg_uninit_buffer(buf Buffer)

// uninit_buffer is currently undocumented
pub fn uninit_buffer(buf Buffer) {
	C.sg_uninit_buffer(buf)
}

// C: `SOKOL_GFX_API_DECL void sg_uninit_image(sg_image img)`
fn C.sg_uninit_image(img Image)

// uninit_image is currently undocumented
pub fn uninit_image(img Image) {
	C.sg_uninit_image(img)
}

// C: `SOKOL_GFX_API_DECL void sg_uninit_sampler(sg_sampler smp)`
fn C.sg_uninit_sampler(smp Sampler)

// uninit_sampler is currently undocumented
pub fn uninit_sampler(smp Sampler) {
	C.sg_uninit_sampler(smp)
}

// C: `SOKOL_GFX_API_DECL void sg_uninit_shader(sg_shader shd)`
fn C.sg_uninit_shader(shd Shader)

// uninit_shader is currently undocumented
pub fn uninit_shader(shd Shader) {
	C.sg_uninit_shader(shd)
}

// C: `SOKOL_GFX_API_DECL void sg_uninit_pipeline(sg_pipeline pip)`
fn C.sg_uninit_pipeline(pip Pipeline)

// uninit_pipeline is currently undocumented
pub fn uninit_pipeline(pip Pipeline) {
	C.sg_uninit_pipeline(pip)
}

// C: `SOKOL_GFX_API_DECL void sg_uninit_attachments(sg_attachments atts)`
fn C.sg_uninit_attachments(atts Attachments)

// uninit_attachments is currently undocumented
pub fn uninit_attachments(atts Attachments) {
	C.sg_uninit_attachments(atts)
}

// C: `SOKOL_GFX_API_DECL void sg_fail_buffer(sg_buffer buf)`
fn C.sg_fail_buffer(buf Buffer)

// fail_buffer is currently undocumented
pub fn fail_buffer(buf Buffer) {
	C.sg_fail_buffer(buf)
}

// C: `SOKOL_GFX_API_DECL void sg_fail_image(sg_image img)`
fn C.sg_fail_image(img Image)

// fail_image is currently undocumented
pub fn fail_image(img Image) {
	C.sg_fail_image(img)
}

// C: `SOKOL_GFX_API_DECL void sg_fail_sampler(sg_sampler smp)`
fn C.sg_fail_sampler(smp Sampler)

// fail_sampler is currently undocumented
pub fn fail_sampler(smp Sampler) {
	C.sg_fail_sampler(smp)
}

// C: `SOKOL_GFX_API_DECL void sg_fail_shader(sg_shader shd)`
fn C.sg_fail_shader(shd Shader)

// fail_shader is currently undocumented
pub fn fail_shader(shd Shader) {
	C.sg_fail_shader(shd)
}

// C: `SOKOL_GFX_API_DECL void sg_fail_pipeline(sg_pipeline pip)`
fn C.sg_fail_pipeline(pip Pipeline)

// fail_pipeline is currently undocumented
pub fn fail_pipeline(pip Pipeline) {
	C.sg_fail_pipeline(pip)
}

// C: `SOKOL_GFX_API_DECL void sg_fail_attachments(sg_attachments atts)`
fn C.sg_fail_attachments(atts Attachments)

// fail_attachments is currently undocumented
pub fn fail_attachments(atts Attachments) {
	C.sg_fail_attachments(atts)
}

// C: `SOKOL_GFX_API_DECL void sg_enable_frame_stats(void)`
fn C.sg_enable_frame_stats()

// enable_frame_stats //s frame stats
pub fn enable_frame_stats() {
	C.sg_enable_frame_stats()
}

// C: `SOKOL_GFX_API_DECL void sg_disable_frame_stats(void)`
fn C.sg_disable_frame_stats()

// disable_frame_stats is currently undocumented
pub fn disable_frame_stats() {
	C.sg_disable_frame_stats()
}

// C: `SOKOL_GFX_API_DECL bool sg_frame_stats_enabled(void)`
fn C.sg_frame_stats_enabled() bool

// frame_stats_enabled is currently undocumented
pub fn frame_stats_enabled() bool {
	return C.sg_frame_stats_enabled()
}

// C: `SOKOL_GFX_API_DECL sg_frame_stats sg_query_frame_stats(void)`
fn C.sg_query_frame_stats() FrameStats

// query_frame_stats is currently undocumented
pub fn query_frame_stats() FrameStats {
	return C.sg_query_frame_stats()
}

@[typedef]
pub struct C.sg_d3d11_buffer_info {
pub mut:
	buf voidptr
}

pub type D3d11BufferInfo = C.sg_d3d11_buffer_info

@[typedef]
pub struct C.sg_d3d11_image_info {
pub mut:
	tex2d voidptr
}

pub type D3d11ImageInfo = C.sg_d3d11_image_info

@[typedef]
pub struct C.sg_d3d11_sampler_info {
pub mut:
	smp voidptr
}

pub type D3d11SamplerInfo = C.sg_d3d11_sampler_info

@[typedef]
pub struct C.sg_d3d11_shader_info {
	// TODO 	vs_cbufs [SG_MAX_SHADERSTAGE_UBS]voidptr
}

pub type D3d11ShaderInfo = C.sg_d3d11_shader_info

@[typedef]
pub struct C.sg_d3d11_pipeline_info {
pub mut:
	il voidptr
}

pub type D3d11PipelineInfo = C.sg_d3d11_pipeline_info

@[typedef]
pub struct C.sg_d3d11_attachments_info {
	// TODO 	color_rtv [SG_MAX_COLOR_ATTACHMENTS]voidptr
}

pub type D3d11AttachmentsInfo = C.sg_d3d11_attachments_info

@[typedef]
pub struct C.sg_mtl_buffer_info {
	// TODO 	buf [SG_NUM_INFLIGHT_FRAMES]voidptr
}

pub type MtlBufferInfo = C.sg_mtl_buffer_info

@[typedef]
pub struct C.sg_mtl_image_info {
	// TODO 	tex [SG_NUM_INFLIGHT_FRAMES]voidptr
}

pub type MtlImageInfo = C.sg_mtl_image_info

@[typedef]
pub struct C.sg_mtl_sampler_info {
pub mut:
	smp voidptr
}

pub type MtlSamplerInfo = C.sg_mtl_sampler_info

@[typedef]
pub struct C.sg_mtl_shader_info {
pub mut:
	vs_lib voidptr
}

pub type MtlShaderInfo = C.sg_mtl_shader_info

@[typedef]
pub struct C.sg_mtl_pipeline_info {
pub mut:
	rps voidptr
}

pub type MtlPipelineInfo = C.sg_mtl_pipeline_info

@[typedef]
pub struct C.sg_wgpu_buffer_info {
pub mut:
	buf voidptr
}

pub type WgpuBufferInfo = C.sg_wgpu_buffer_info

@[typedef]
pub struct C.sg_wgpu_image_info {
pub mut:
	tex voidptr
}

pub type WgpuImageInfo = C.sg_wgpu_image_info

@[typedef]
pub struct C.sg_wgpu_sampler_info {
pub mut:
	smp voidptr
}

pub type WgpuSamplerInfo = C.sg_wgpu_sampler_info

@[typedef]
pub struct C.sg_wgpu_shader_info {
pub mut:
	vs_mod voidptr
}

pub type WgpuShaderInfo = C.sg_wgpu_shader_info

@[typedef]
pub struct C.sg_wgpu_pipeline_info {
pub mut:
	pip voidptr
}

pub type WgpuPipelineInfo = C.sg_wgpu_pipeline_info

@[typedef]
pub struct C.sg_wgpu_attachments_info {
	// TODO 	color_view [SG_MAX_COLOR_ATTACHMENTS]voidptr
}

pub type WgpuAttachmentsInfo = C.sg_wgpu_attachments_info

@[typedef]
pub struct C.sg_gl_buffer_info {
pub mut:
	// TODO 	buf [SG_NUM_INFLIGHT_FRAMES]u32
	active_slot int
}

pub type GlBufferInfo = C.sg_gl_buffer_info

@[typedef]
pub struct C.sg_gl_image_info {
pub mut:
	// TODO 	tex [SG_NUM_INFLIGHT_FRAMES]u32
	tex_target         u32
	msaa_render_buffer u32
	active_slot        int
}

pub type GlImageInfo = C.sg_gl_image_info

@[typedef]
pub struct C.sg_gl_sampler_info {
pub mut:
	smp u32
}

pub type GlSamplerInfo = C.sg_gl_sampler_info

@[typedef]
pub struct C.sg_gl_shader_info {
pub mut:
	prog u32
}

pub type GlShaderInfo = C.sg_gl_shader_info

@[typedef]
pub struct C.sg_gl_attachments_info {
pub mut:
	framebuffer u32
	// TODO 	msaa_resolve_framebuffer [SG_MAX_COLOR_ATTACHMENTS]u32
}

pub type GlAttachmentsInfo = C.sg_gl_attachments_info

// C: `SOKOL_GFX_API_DECL const void* sg_d3d11_device(void)`
fn C.sg_d3d11_device() voidptr

// d3d11_device d3d11:s return ID3D11Device
pub fn d3d11_device() voidptr {
	return C.sg_d3d11_device()
}

// C: `SOKOL_GFX_API_DECL const void* sg_d3d11_device_context(void)`
fn C.sg_d3d11_device_context() voidptr

// d3d11_device_context //s D3D11: return ID3D11DeviceContext
pub fn d3d11_device_context() voidptr {
	return C.sg_d3d11_device_context()
}

// C: `SOKOL_GFX_API_DECL sg_d3d11_buffer_info sg_d3d11_query_buffer_info(sg_buffer buf)`
fn C.sg_d3d11_query_buffer_info(buf Buffer) D3d11BufferInfo

// d3d11_query_buffer_info //s D3D11: get internal buffer resource objects
pub fn d3d11_query_buffer_info(buf Buffer) D3d11BufferInfo {
	return C.sg_d3d11_query_buffer_info(buf)
}

// C: `SOKOL_GFX_API_DECL sg_d3d11_image_info sg_d3d11_query_image_info(sg_image img)`
fn C.sg_d3d11_query_image_info(img Image) D3d11ImageInfo

// d3d11_query_image_info //s D3D11: get internal image resource objects
pub fn d3d11_query_image_info(img Image) D3d11ImageInfo {
	return C.sg_d3d11_query_image_info(img)
}

// C: `SOKOL_GFX_API_DECL sg_d3d11_sampler_info sg_d3d11_query_sampler_info(sg_sampler smp)`
fn C.sg_d3d11_query_sampler_info(smp Sampler) D3d11SamplerInfo

// d3d11_query_sampler_info //s D3D11: get internal sampler resource objects
pub fn d3d11_query_sampler_info(smp Sampler) D3d11SamplerInfo {
	return C.sg_d3d11_query_sampler_info(smp)
}

// C: `SOKOL_GFX_API_DECL sg_d3d11_shader_info sg_d3d11_query_shader_info(sg_shader shd)`
fn C.sg_d3d11_query_shader_info(shd Shader) D3d11ShaderInfo

// d3d11_query_shader_info //s D3D11: get internal shader resource objects
pub fn d3d11_query_shader_info(shd Shader) D3d11ShaderInfo {
	return C.sg_d3d11_query_shader_info(shd)
}

// C: `SOKOL_GFX_API_DECL sg_d3d11_pipeline_info sg_d3d11_query_pipeline_info(sg_pipeline pip)`
fn C.sg_d3d11_query_pipeline_info(pip Pipeline) D3d11PipelineInfo

// d3d11_query_pipeline_info //s D3D11: get internal pipeline resource objects
pub fn d3d11_query_pipeline_info(pip Pipeline) D3d11PipelineInfo {
	return C.sg_d3d11_query_pipeline_info(pip)
}

// C: `SOKOL_GFX_API_DECL sg_d3d11_attachments_info sg_d3d11_query_attachments_info(sg_attachments atts)`
fn C.sg_d3d11_query_attachments_info(atts Attachments) D3d11AttachmentsInfo

// d3d11_query_attachments_info //s D3D11: get internal pass resource objects
pub fn d3d11_query_attachments_info(atts Attachments) D3d11AttachmentsInfo {
	return C.sg_d3d11_query_attachments_info(atts)
}

// C: `SOKOL_GFX_API_DECL const void* sg_mtl_device(void)`
fn C.sg_mtl_device() voidptr

// mtl_device metal:s return __bridge-casted MTLDevice
pub fn mtl_device() voidptr {
	return C.sg_mtl_device()
}

// C: `SOKOL_GFX_API_DECL const void* sg_mtl_render_command_encoder(void)`
fn C.sg_mtl_render_command_encoder() voidptr

// mtl_render_command_encoder metal:s return __bridge-casted MTLRenderCommandEncoder in current pass (or zero if outside pass)
pub fn mtl_render_command_encoder() voidptr {
	return C.sg_mtl_render_command_encoder()
}

// C: `SOKOL_GFX_API_DECL sg_mtl_buffer_info sg_mtl_query_buffer_info(sg_buffer buf)`
fn C.sg_mtl_query_buffer_info(buf Buffer) MtlBufferInfo

// mtl_query_buffer_info //s Metal: get internal __bridge-casted buffer resource objects
pub fn mtl_query_buffer_info(buf Buffer) MtlBufferInfo {
	return C.sg_mtl_query_buffer_info(buf)
}

// C: `SOKOL_GFX_API_DECL sg_mtl_image_info sg_mtl_query_image_info(sg_image img)`
fn C.sg_mtl_query_image_info(img Image) MtlImageInfo

// mtl_query_image_info //s Metal: get internal __bridge-casted image resource objects
pub fn mtl_query_image_info(img Image) MtlImageInfo {
	return C.sg_mtl_query_image_info(img)
}

// C: `SOKOL_GFX_API_DECL sg_mtl_sampler_info sg_mtl_query_sampler_info(sg_sampler smp)`
fn C.sg_mtl_query_sampler_info(smp Sampler) MtlSamplerInfo

// mtl_query_sampler_info //s Metal: get internal __bridge-casted sampler resource objects
pub fn mtl_query_sampler_info(smp Sampler) MtlSamplerInfo {
	return C.sg_mtl_query_sampler_info(smp)
}

// C: `SOKOL_GFX_API_DECL sg_mtl_shader_info sg_mtl_query_shader_info(sg_shader shd)`
fn C.sg_mtl_query_shader_info(shd Shader) MtlShaderInfo

// mtl_query_shader_info //s Metal: get internal __bridge-casted shader resource objects
pub fn mtl_query_shader_info(shd Shader) MtlShaderInfo {
	return C.sg_mtl_query_shader_info(shd)
}

// C: `SOKOL_GFX_API_DECL sg_mtl_pipeline_info sg_mtl_query_pipeline_info(sg_pipeline pip)`
fn C.sg_mtl_query_pipeline_info(pip Pipeline) MtlPipelineInfo

// mtl_query_pipeline_info //s Metal: get internal __bridge-casted pipeline resource objects
pub fn mtl_query_pipeline_info(pip Pipeline) MtlPipelineInfo {
	return C.sg_mtl_query_pipeline_info(pip)
}

// C: `SOKOL_GFX_API_DECL const void* sg_wgpu_device(void)`
fn C.sg_wgpu_device() voidptr

// wgpu_device //s WebGPU: return WGPUDevice object
pub fn wgpu_device() voidptr {
	return C.sg_wgpu_device()
}

// C: `SOKOL_GFX_API_DECL const void* sg_wgpu_queue(void)`
fn C.sg_wgpu_queue() voidptr

// wgpu_queue //s WebGPU: return WGPUQueue object
pub fn wgpu_queue() voidptr {
	return C.sg_wgpu_queue()
}

// C: `SOKOL_GFX_API_DECL const void* sg_wgpu_command_encoder(void)`
fn C.sg_wgpu_command_encoder() voidptr

// wgpu_command_encoder //s WebGPU: return this frame's WGPUCommandEncoder
pub fn wgpu_command_encoder() voidptr {
	return C.sg_wgpu_command_encoder()
}

// C: `SOKOL_GFX_API_DECL const void* sg_wgpu_render_pass_encoder(void)`
fn C.sg_wgpu_render_pass_encoder() voidptr

// wgpu_render_pass_encoder //s WebGPU: return WGPURenderPassEncoder of current pass
pub fn wgpu_render_pass_encoder() voidptr {
	return C.sg_wgpu_render_pass_encoder()
}

// C: `SOKOL_GFX_API_DECL sg_wgpu_buffer_info sg_wgpu_query_buffer_info(sg_buffer buf)`
fn C.sg_wgpu_query_buffer_info(buf Buffer) WgpuBufferInfo

// wgpu_query_buffer_info //s WebGPU: get internal buffer resource objects
pub fn wgpu_query_buffer_info(buf Buffer) WgpuBufferInfo {
	return C.sg_wgpu_query_buffer_info(buf)
}

// C: `SOKOL_GFX_API_DECL sg_wgpu_image_info sg_wgpu_query_image_info(sg_image img)`
fn C.sg_wgpu_query_image_info(img Image) WgpuImageInfo

// wgpu_query_image_info //s WebGPU: get internal image resource objects
pub fn wgpu_query_image_info(img Image) WgpuImageInfo {
	return C.sg_wgpu_query_image_info(img)
}

// C: `SOKOL_GFX_API_DECL sg_wgpu_sampler_info sg_wgpu_query_sampler_info(sg_sampler smp)`
fn C.sg_wgpu_query_sampler_info(smp Sampler) WgpuSamplerInfo

// wgpu_query_sampler_info //s WebGPU: get internal sampler resource objects
pub fn wgpu_query_sampler_info(smp Sampler) WgpuSamplerInfo {
	return C.sg_wgpu_query_sampler_info(smp)
}

// C: `SOKOL_GFX_API_DECL sg_wgpu_shader_info sg_wgpu_query_shader_info(sg_shader shd)`
fn C.sg_wgpu_query_shader_info(shd Shader) WgpuShaderInfo

// wgpu_query_shader_info //s WebGPU: get internal shader resource objects
pub fn wgpu_query_shader_info(shd Shader) WgpuShaderInfo {
	return C.sg_wgpu_query_shader_info(shd)
}

// C: `SOKOL_GFX_API_DECL sg_wgpu_pipeline_info sg_wgpu_query_pipeline_info(sg_pipeline pip)`
fn C.sg_wgpu_query_pipeline_info(pip Pipeline) WgpuPipelineInfo

// wgpu_query_pipeline_info //s WebGPU: get internal pipeline resource objects
pub fn wgpu_query_pipeline_info(pip Pipeline) WgpuPipelineInfo {
	return C.sg_wgpu_query_pipeline_info(pip)
}

// C: `SOKOL_GFX_API_DECL sg_wgpu_attachments_info sg_wgpu_query_attachments_info(sg_attachments atts)`
fn C.sg_wgpu_query_attachments_info(atts Attachments) WgpuAttachmentsInfo

// wgpu_query_attachments_info //s WebGPU: get internal pass resource objects
pub fn wgpu_query_attachments_info(atts Attachments) WgpuAttachmentsInfo {
	return C.sg_wgpu_query_attachments_info(atts)
}

// C: `SOKOL_GFX_API_DECL sg_gl_buffer_info sg_gl_query_buffer_info(sg_buffer buf)`
fn C.sg_gl_query_buffer_info(buf Buffer) GlBufferInfo

// gl_query_buffer_info //s GL: get internal buffer resource objects
pub fn gl_query_buffer_info(buf Buffer) GlBufferInfo {
	return C.sg_gl_query_buffer_info(buf)
}

// C: `SOKOL_GFX_API_DECL sg_gl_image_info sg_gl_query_image_info(sg_image img)`
fn C.sg_gl_query_image_info(img Image) GlImageInfo

// gl_query_image_info //s GL: get internal image resource objects
pub fn gl_query_image_info(img Image) GlImageInfo {
	return C.sg_gl_query_image_info(img)
}

// C: `SOKOL_GFX_API_DECL sg_gl_sampler_info sg_gl_query_sampler_info(sg_sampler smp)`
fn C.sg_gl_query_sampler_info(smp Sampler) GlSamplerInfo

// gl_query_sampler_info //s GL: get internal sampler resource objects
pub fn gl_query_sampler_info(smp Sampler) GlSamplerInfo {
	return C.sg_gl_query_sampler_info(smp)
}

// C: `SOKOL_GFX_API_DECL sg_gl_shader_info sg_gl_query_shader_info(sg_shader shd)`
fn C.sg_gl_query_shader_info(shd Shader) GlShaderInfo

// gl_query_shader_info //s GL: get internal shader resource objects
pub fn gl_query_shader_info(shd Shader) GlShaderInfo {
	return C.sg_gl_query_shader_info(shd)
}

// C: `SOKOL_GFX_API_DECL sg_gl_attachments_info sg_gl_query_attachments_info(sg_attachments atts)`
fn C.sg_gl_query_attachments_info(atts Attachments) GlAttachmentsInfo

// gl_query_attachments_info //s GL: get internal pass resource objects
pub fn gl_query_attachments_info(atts Attachments) GlAttachmentsInfo {
	return C.sg_gl_query_attachments_info(atts)
}
